{"cells":[{"cell_type":"markdown","source":["# Name : MD ARSHAD KHAN\n","## Banner ID : 001413634"],"metadata":{"id":"ipol3wBWUKn6"}},{"cell_type":"markdown","metadata":{"id":"43ea52b3-24cb-4c74-b695-017c8c07a3ac"},"source":["<h2>Table of Contents</h2>\n","\n","<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n","<ol>\n","    <li><a href=\"#import_data\">Import Data from Module</a></li>\n","    <li><a href=\"#pattern_visualization\">Analyzing Individual Feature Patterns using Visualization</a></li>\n","    <li><a href=\"#discriptive_statistics\">Descriptive Statistical Analysis</a></li>\n","    <li><a href=\"#basic_grouping\">Basics of Grouping</a></li>\n","    <li><a href=\"#correlation_causation\">Correlation and Causation</a></li>\n","</ol>\n","\n","</div>\n","\n","<hr>\n"]},{"cell_type":"markdown","metadata":{"id":"e9f2ae84-b3d8-4696-aac5-201aee93a4ff"},"source":["<h3>What are the main characteristics that have the most impact on the car price?</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"91954dcf-5fae-4532-9cee-f5dc2fd26638"},"source":["<h2 id=\"import_data\">1. Import Data from Part 1</h2>\n"]},{"cell_type":"markdown","metadata":{"id":"cc394b67-1756-4999-80d7-567c3135ee4c"},"source":["<h4>Setup</h4>\n"]},{"cell_type":"markdown","metadata":{"id":"cf284640-0aed-4f72-b0d4-03d75973ff5b"},"source":["Import libraries:\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"853c58ab-4e06-4c21-b03b-ae91c2d222a5"},"outputs":[],"source":["import pandas as pd\n","import numpy as np"]},{"cell_type":"markdown","metadata":{"id":"738ad24f-3bf4-4aa0-8263-44895f1b7c70"},"source":["Load the data and store it in dataframe `df`:\n"]},{"cell_type":"markdown","metadata":{"id":"c3df21ae-c7b7-4ce3-883d-ab35b02ef0a7"},"source":["This dataset was hosted on IBM Cloud object. Click <a href=\"https://cocl.us/DA101EN_object_storage\">HERE</a> for free storage.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":342},"id":"2ded06fc-b78e-4ab2-9534-976269942564","executionInfo":{"status":"ok","timestamp":1744825825050,"user_tz":300,"elapsed":368,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"3fdb7e59-92c2-4aa8-be98-64a7b05e0693"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   symboling  normalized-losses         make aspiration num-of-doors  \\\n","0          3                122  alfa-romero        std          two   \n","1          3                122  alfa-romero        std          two   \n","2          1                122  alfa-romero        std          two   \n","3          2                164         audi        std         four   \n","4          2                164         audi        std         four   \n","\n","    body-style drive-wheels engine-location  wheel-base    length  ...  \\\n","0  convertible          rwd           front        88.6  0.811148  ...   \n","1  convertible          rwd           front        88.6  0.811148  ...   \n","2    hatchback          rwd           front        94.5  0.822681  ...   \n","3        sedan          fwd           front        99.8  0.848630  ...   \n","4        sedan          4wd           front        99.4  0.848630  ...   \n","\n","   compression-ratio  horsepower  peak-rpm city-mpg highway-mpg    price  \\\n","0                9.0       111.0    5000.0       21          27  13495.0   \n","1                9.0       111.0    5000.0       21          27  16500.0   \n","2                9.0       154.0    5000.0       19          26  16500.0   \n","3               10.0       102.0    5500.0       24          30  13950.0   \n","4                8.0       115.0    5500.0       18          22  17450.0   \n","\n","  city-L/100km  horsepower-binned  diesel  gas  \n","0    11.190476             Medium       0    1  \n","1    11.190476             Medium       0    1  \n","2    12.368421             Medium       0    1  \n","3     9.791667             Medium       0    1  \n","4    13.055556             Medium       0    1  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-0101e2aa-a5db-4332-a298-ed333a2861c7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>symboling</th>\n","      <th>normalized-losses</th>\n","      <th>make</th>\n","      <th>aspiration</th>\n","      <th>num-of-doors</th>\n","      <th>body-style</th>\n","      <th>drive-wheels</th>\n","      <th>engine-location</th>\n","      <th>wheel-base</th>\n","      <th>length</th>\n","      <th>...</th>\n","      <th>compression-ratio</th>\n","      <th>horsepower</th>\n","      <th>peak-rpm</th>\n","      <th>city-mpg</th>\n","      <th>highway-mpg</th>\n","      <th>price</th>\n","      <th>city-L/100km</th>\n","      <th>horsepower-binned</th>\n","      <th>diesel</th>\n","      <th>gas</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>122</td>\n","      <td>alfa-romero</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>0.811148</td>\n","      <td>...</td>\n","      <td>9.0</td>\n","      <td>111.0</td>\n","      <td>5000.0</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>13495.0</td>\n","      <td>11.190476</td>\n","      <td>Medium</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>122</td>\n","      <td>alfa-romero</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>0.811148</td>\n","      <td>...</td>\n","      <td>9.0</td>\n","      <td>111.0</td>\n","      <td>5000.0</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>16500.0</td>\n","      <td>11.190476</td>\n","      <td>Medium</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>122</td>\n","      <td>alfa-romero</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>hatchback</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>94.5</td>\n","      <td>0.822681</td>\n","      <td>...</td>\n","      <td>9.0</td>\n","      <td>154.0</td>\n","      <td>5000.0</td>\n","      <td>19</td>\n","      <td>26</td>\n","      <td>16500.0</td>\n","      <td>12.368421</td>\n","      <td>Medium</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>164</td>\n","      <td>audi</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>fwd</td>\n","      <td>front</td>\n","      <td>99.8</td>\n","      <td>0.848630</td>\n","      <td>...</td>\n","      <td>10.0</td>\n","      <td>102.0</td>\n","      <td>5500.0</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>13950.0</td>\n","      <td>9.791667</td>\n","      <td>Medium</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>164</td>\n","      <td>audi</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>4wd</td>\n","      <td>front</td>\n","      <td>99.4</td>\n","      <td>0.848630</td>\n","      <td>...</td>\n","      <td>8.0</td>\n","      <td>115.0</td>\n","      <td>5500.0</td>\n","      <td>18</td>\n","      <td>22</td>\n","      <td>17450.0</td>\n","      <td>13.055556</td>\n","      <td>Medium</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0101e2aa-a5db-4332-a298-ed333a2861c7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0101e2aa-a5db-4332-a298-ed333a2861c7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0101e2aa-a5db-4332-a298-ed333a2861c7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-01ac8f5e-8f06-44aa-8a47-68b11ac4c69f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-01ac8f5e-8f06-44aa-8a47-68b11ac4c69f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-01ac8f5e-8f06-44aa-8a47-68b11ac4c69f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":2}],"source":["path='https://raw.githubusercontent.com/klamsal/Fall2024Exam/refs/heads/main/CleanedAutomobile.csv'\n","df = pd.read_csv(path)\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"52440616-9b24-4ed0-ad93-d7d9bffc5f57"},"source":["<h2 id=\"pattern_visualization\">2. Analyzing Individual Feature Patterns Using Visualization</h2>\n"]},{"cell_type":"markdown","metadata":{"id":"81a009cc-b56c-4220-9eea-22d35571fd9d"},"source":["To install Seaborn we use pip, the Python package manager.\n"]},{"cell_type":"markdown","metadata":{"id":"91a4d224-93d5-4a63-bda3-d0beaacc60b0"},"source":["Import visualization packages \"Matplotlib\" and \"Seaborn\". Don't forget about \"%matplotlib inline\" to plot in a Jupyter notebook.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b5034b28-282d-48a8-963e-f99de5a4efe0"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"fd33df0a-a332-422e-a253-c3d9d3b31423"},"source":["<h4>How to choose the right visualization method?</h4>\n","<p>When visualizing individual variables, it is important to first understand what type of variable you are dealing with. This will help us find the right visualization method for that variable.</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bca2f808-48ac-4d56-9105-7051f1dcb663","executionInfo":{"status":"ok","timestamp":1744825841946,"user_tz":300,"elapsed":8,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"5c429659-74a8-4b52-e6a8-92205a6c876f"},"outputs":[{"output_type":"stream","name":"stdout","text":["symboling              int64\n","normalized-losses      int64\n","make                  object\n","aspiration            object\n","num-of-doors          object\n","body-style            object\n","drive-wheels          object\n","engine-location       object\n","wheel-base           float64\n","length               float64\n","width                float64\n","height               float64\n","curb-weight            int64\n","engine-type           object\n","num-of-cylinders      object\n","engine-size            int64\n","fuel-system           object\n","bore                 float64\n","stroke               float64\n","compression-ratio    float64\n","horsepower           float64\n","peak-rpm             float64\n","city-mpg               int64\n","highway-mpg            int64\n","price                float64\n","city-L/100km         float64\n","horsepower-binned     object\n","diesel                 int64\n","gas                    int64\n","dtype: object\n"]}],"source":["# list the data types for each column\n","print(df.dtypes)"]},{"cell_type":"markdown","metadata":{"id":"c8d7c216-2cb5-4bc3-b47c-e30844abd19d"},"source":["<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n","<h3>Question  #1:</h3>\n","\n","<b>What is the data type of the column \"peak-rpm\"? </b>\n","</div>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"db3a66e1-9a1a-4a89-bd22-da3e8a704cd8","executionInfo":{"status":"ok","timestamp":1744826099835,"user_tz":300,"elapsed":9,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"66490cf1-ed50-443a-d30f-33dd00cb469e"},"outputs":[{"output_type":"stream","name":"stdout","text":["float64\n"]}],"source":["# Write your code below and press Shift+Enter to execute\n","\n","print(df['peak-rpm'].dtype)"]},{"cell_type":"markdown","metadata":{"id":"481820dc-a786-4330-b5c8-08bdb84cb034"},"source":["For example, we can calculate the correlation between variables  of type \"int64\" or \"float64\" using the method \"corr\":\n"]},{"cell_type":"code","source":["# Correlation\n","\n","numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns\n","correlation_matrix = df[numeric_cols].corr()\n","print(correlation_matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ovIyh2hG2wL0","executionInfo":{"status":"ok","timestamp":1744828114272,"user_tz":300,"elapsed":46,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"da89f079-e7d5-422d-a7ae-84ece58a56c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                   symboling  normalized-losses  wheel-base    length  \\\n","symboling           1.000000           0.466264   -0.535987 -0.365404   \n","normalized-losses   0.466264           1.000000   -0.056661  0.019424   \n","wheel-base         -0.535987          -0.056661    1.000000  0.876024   \n","length             -0.365404           0.019424    0.876024  1.000000   \n","width              -0.242423           0.086802    0.814507  0.857170   \n","height             -0.550160          -0.373737    0.590742  0.492063   \n","curb-weight        -0.233118           0.099404    0.782097  0.880665   \n","engine-size        -0.110581           0.112360    0.572027  0.685025   \n","bore               -0.140019          -0.029862    0.493244  0.608971   \n","stroke             -0.008245           0.055563    0.158502  0.124139   \n","compression-ratio  -0.182196          -0.114713    0.250313  0.159733   \n","horsepower          0.075819           0.217299    0.371147  0.579821   \n","peak-rpm            0.279740           0.239543   -0.360305 -0.285970   \n","city-mpg           -0.035527          -0.225016   -0.470606 -0.665192   \n","highway-mpg         0.036233          -0.181877   -0.543304 -0.698142   \n","price              -0.082391           0.133999    0.584642  0.690628   \n","city-L/100km        0.066171           0.238567    0.476153  0.657373   \n","diesel             -0.196735          -0.101546    0.307237  0.211187   \n","gas                 0.196735           0.101546   -0.307237 -0.211187   \n","\n","                      width    height  curb-weight  engine-size      bore  \\\n","symboling         -0.242423 -0.550160    -0.233118    -0.110581 -0.140019   \n","normalized-losses  0.086802 -0.373737     0.099404     0.112360 -0.029862   \n","wheel-base         0.814507  0.590742     0.782097     0.572027  0.493244   \n","length             0.857170  0.492063     0.880665     0.685025  0.608971   \n","width              1.000000  0.306002     0.866201     0.729436  0.544885   \n","height             0.306002  1.000000     0.307581     0.074694  0.180449   \n","curb-weight        0.866201  0.307581     1.000000     0.849072  0.644060   \n","engine-size        0.729436  0.074694     0.849072     1.000000  0.572609   \n","bore               0.544885  0.180449     0.644060     0.572609  1.000000   \n","stroke             0.188829 -0.062704     0.167562     0.209523 -0.055390   \n","compression-ratio  0.189867  0.259737     0.156433     0.028889  0.001263   \n","horsepower         0.615077 -0.087027     0.757976     0.822676  0.566936   \n","peak-rpm          -0.245800 -0.309974    -0.279361    -0.256733 -0.267392   \n","city-mpg          -0.633531 -0.049800    -0.749543    -0.650546 -0.582027   \n","highway-mpg       -0.680635 -0.104812    -0.794889    -0.679571 -0.591309   \n","price              0.751265  0.135486     0.834415     0.872335  0.543155   \n","city-L/100km       0.673363  0.003811     0.785353     0.745059  0.554610   \n","diesel             0.244356  0.281578     0.221046     0.070779  0.054458   \n","gas               -0.244356 -0.281578    -0.221046    -0.070779 -0.054458   \n","\n","                     stroke  compression-ratio  horsepower  peak-rpm  \\\n","symboling         -0.008245          -0.182196    0.075819  0.279740   \n","normalized-losses  0.055563          -0.114713    0.217299  0.239543   \n","wheel-base         0.158502           0.250313    0.371147 -0.360305   \n","length             0.124139           0.159733    0.579821 -0.285970   \n","width              0.188829           0.189867    0.615077 -0.245800   \n","height            -0.062704           0.259737   -0.087027 -0.309974   \n","curb-weight        0.167562           0.156433    0.757976 -0.279361   \n","engine-size        0.209523           0.028889    0.822676 -0.256733   \n","bore              -0.055390           0.001263    0.566936 -0.267392   \n","stroke             1.000000           0.187923    0.098462 -0.065713   \n","compression-ratio  0.187923           1.000000   -0.214514 -0.435780   \n","horsepower         0.098462          -0.214514    1.000000  0.107885   \n","peak-rpm          -0.065713          -0.435780    0.107885  1.000000   \n","city-mpg          -0.034696           0.331425   -0.822214 -0.115413   \n","highway-mpg       -0.035201           0.268465   -0.804575 -0.058598   \n","price              0.082310           0.071107    0.809575 -0.101616   \n","city-L/100km       0.037300          -0.299372    0.889488  0.115830   \n","diesel             0.241303           0.985231   -0.169053 -0.475812   \n","gas               -0.241303          -0.985231    0.169053  0.475812   \n","\n","                   city-mpg  highway-mpg     price  city-L/100km    diesel  \\\n","symboling         -0.035527     0.036233 -0.082391      0.066171 -0.196735   \n","normalized-losses -0.225016    -0.181877  0.133999      0.238567 -0.101546   \n","wheel-base        -0.470606    -0.543304  0.584642      0.476153  0.307237   \n","length            -0.665192    -0.698142  0.690628      0.657373  0.211187   \n","width             -0.633531    -0.680635  0.751265      0.673363  0.244356   \n","height            -0.049800    -0.104812  0.135486      0.003811  0.281578   \n","curb-weight       -0.749543    -0.794889  0.834415      0.785353  0.221046   \n","engine-size       -0.650546    -0.679571  0.872335      0.745059  0.070779   \n","bore              -0.582027    -0.591309  0.543155      0.554610  0.054458   \n","stroke            -0.034696    -0.035201  0.082310      0.037300  0.241303   \n","compression-ratio  0.331425     0.268465  0.071107     -0.299372  0.985231   \n","horsepower        -0.822214    -0.804575  0.809575      0.889488 -0.169053   \n","peak-rpm          -0.115413    -0.058598 -0.101616      0.115830 -0.475812   \n","city-mpg           1.000000     0.972044 -0.686571     -0.949713  0.265676   \n","highway-mpg        0.972044     1.000000 -0.704692     -0.930028  0.198690   \n","price             -0.686571    -0.704692  1.000000      0.789898  0.110326   \n","city-L/100km      -0.949713    -0.930028  0.789898      1.000000 -0.241282   \n","diesel             0.265676     0.198690  0.110326     -0.241282  1.000000   \n","gas               -0.265676    -0.198690 -0.110326      0.241282 -1.000000   \n","\n","                        gas  \n","symboling          0.196735  \n","normalized-losses  0.101546  \n","wheel-base        -0.307237  \n","length            -0.211187  \n","width             -0.244356  \n","height            -0.281578  \n","curb-weight       -0.221046  \n","engine-size       -0.070779  \n","bore              -0.054458  \n","stroke            -0.241303  \n","compression-ratio -0.985231  \n","horsepower         0.169053  \n","peak-rpm           0.475812  \n","city-mpg          -0.265676  \n","highway-mpg       -0.198690  \n","price             -0.110326  \n","city-L/100km       0.241282  \n","diesel            -1.000000  \n","gas                1.000000  \n"]}]},{"cell_type":"markdown","metadata":{"id":"3472dbad-6993-4bd6-b19a-2a49aa50d401"},"source":["The diagonal elements are always one; we will study correlation more precisely Pearson correlation in-depth at the end of the notebook.\n"]},{"cell_type":"markdown","metadata":{"id":"c14d8794-8313-4daa-94db-0dfe7067c1c9"},"source":["<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n","<h3> Question  #2: </h3>\n","\n","<p>Find the correlation between the following columns: bore, stroke, compression-ratio, and horsepower.</p>\n","<p>Hint: if you would like to select those columns, use the following syntax: df[['bore','stroke','compression-ratio','horsepower']]</p>\n","</div>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"8804f698-e4b8-486b-b0df-82174c707ac9","executionInfo":{"status":"ok","timestamp":1744828205416,"user_tz":300,"elapsed":46,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"e02fc72b-b25c-4969-fc5d-963b4b298ae2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                       bore    stroke  compression-ratio  horsepower\n","bore               1.000000 -0.055390           0.001263    0.566936\n","stroke            -0.055390  1.000000           0.187923    0.098462\n","compression-ratio  0.001263  0.187923           1.000000   -0.214514\n","horsepower         0.566936  0.098462          -0.214514    1.000000"],"text/html":["\n","  <div id=\"df-f7f0a8e7-c7d2-4d28-9517-24082e2dd80f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>bore</th>\n","      <th>stroke</th>\n","      <th>compression-ratio</th>\n","      <th>horsepower</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>bore</th>\n","      <td>1.000000</td>\n","      <td>-0.055390</td>\n","      <td>0.001263</td>\n","      <td>0.566936</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>-0.055390</td>\n","      <td>1.000000</td>\n","      <td>0.187923</td>\n","      <td>0.098462</td>\n","    </tr>\n","    <tr>\n","      <th>compression-ratio</th>\n","      <td>0.001263</td>\n","      <td>0.187923</td>\n","      <td>1.000000</td>\n","      <td>-0.214514</td>\n","    </tr>\n","    <tr>\n","      <th>horsepower</th>\n","      <td>0.566936</td>\n","      <td>0.098462</td>\n","      <td>-0.214514</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7f0a8e7-c7d2-4d28-9517-24082e2dd80f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f7f0a8e7-c7d2-4d28-9517-24082e2dd80f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f7f0a8e7-c7d2-4d28-9517-24082e2dd80f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9eb19e29-eac5-48ca-8f0b-0d785c163940\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9eb19e29-eac5-48ca-8f0b-0d785c163940')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9eb19e29-eac5-48ca-8f0b-0d785c163940 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[['bore', 'stroke', 'compression-ratio', 'horsepower']]\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"bore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.500778696548986,\n        \"min\": -0.05539001099301429,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.05539001099301429,\n          0.5669355262876099,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4723136683649593,\n        \"min\": -0.05539001099301429,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          0.09846204290787056,\n          -0.05539001099301429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"compression-ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.530357258664659,\n        \"min\": -0.21451413568333663,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.18792335475524902,\n          -0.21451413568333663,\n          0.0012633047110310173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"horsepower\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5325602610217216,\n        \"min\": -0.21451413568333663,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.09846204290787056,\n          1.0,\n          0.5669355262876099\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":64}],"source":["# Write your code below and press Shift+Enter to execute\n","\n","df[['bore', 'stroke', 'compression-ratio', 'horsepower']].corr()"]},{"cell_type":"markdown","metadata":{"id":"5b2f0fb1-7efc-4244-a575-41e6be689e99"},"source":["<h2>Continuous Numerical Variables:</h2>\n","\n","<p>Continuous numerical variables are variables that may contain any value within some range. They can be of type \"int64\" or \"float64\". A great way to visualize these variables is by using scatterplots with fitted lines.</p>\n","\n","<p>In order to start understanding the (linear) relationship between an individual variable and the price, we can use \"regplot\" which plots the scatterplot plus the fitted regression line for the data. This will be useful later on for visualizing the fit of the simple linear regression model as well. </p>\n"]},{"cell_type":"markdown","metadata":{"id":"66972d11-fb5f-4365-9e2c-69e75c2c0767"},"source":[" Let's see several examples of different linear relationships:\n"]},{"cell_type":"markdown","metadata":{"id":"e8d39d7f-4e35-45df-9da0-2f47e0117dcd"},"source":["<h3>Positive Linear Relationship</h4>\n"]},{"cell_type":"markdown","metadata":{"id":"55defadf-65fb-4ff6-a3ff-06f6c1335867"},"source":["Let's find the scatterplot of \"engine-size\" and \"price\".\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"a5abe931-f3e5-45ac-b5ab-4d48db465ceb","executionInfo":{"status":"ok","timestamp":1744828210576,"user_tz":300,"elapsed":231,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"10742e5b-85d9-40a0-a3b6-5d18ca078e91"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.0, 53587.78838309053)"]},"metadata":{},"execution_count":65},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Engine size as potential predictor variable of price\n","sns.regplot(x=\"engine-size\", y=\"price\", data=df)\n","plt.ylim(0,)"]},{"cell_type":"markdown","metadata":{"id":"8b060b7c-e69d-40a2-92ad-f6728ce77c23"},"source":["<p>As the engine-size goes up, the price goes up: this indicates a positive direct correlation between these two variables. Engine size seems like a pretty good predictor of price since the regression line is almost a perfect diagonal line.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"fdb2c2e6-0d51-4f0f-b11a-42f8f9ddc1fb"},"source":[" We can examine the correlation between 'engine-size' and 'price' and see that it's approximately 0.87.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"52756fcb-2f9f-4e39-8642-c351b380452c","executionInfo":{"status":"ok","timestamp":1744828213709,"user_tz":300,"elapsed":34,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"9ffa4097-dc71-471b-e89d-f5f3a176f585"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             engine-size     price\n","engine-size     1.000000  0.872335\n","price           0.872335  1.000000"],"text/html":["\n","  <div id=\"df-4b767582-82a4-4e3e-ad04-5e18a2a43700\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>engine-size</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>engine-size</th>\n","      <td>1.000000</td>\n","      <td>0.872335</td>\n","    </tr>\n","    <tr>\n","      <th>price</th>\n","      <td>0.872335</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b767582-82a4-4e3e-ad04-5e18a2a43700')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4b767582-82a4-4e3e-ad04-5e18a2a43700 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4b767582-82a4-4e3e-ad04-5e18a2a43700');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-39c75a73-0410-4e2f-9b48-f341244b2532\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-39c75a73-0410-4e2f-9b48-f341244b2532')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-39c75a73-0410-4e2f-9b48-f341244b2532 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"engine-size\\\", \\\"price\\\"]]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"engine-size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09027266881831919,\n        \"min\": 0.8723351674455182,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.8723351674455182,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09027266881831919,\n        \"min\": 0.8723351674455182,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.8723351674455182\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":66}],"source":["df[[\"engine-size\", \"price\"]].corr()"]},{"cell_type":"markdown","metadata":{"id":"2448a0a5-15c8-45a9-9482-45675642bd82"},"source":["Highway mpg is a potential predictor variable of price. Let's find the scatterplot of \"highway-mpg\" and \"price\".\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"4a1f8fa1-5e70-4760-bbbb-603d20de74b2","executionInfo":{"status":"ok","timestamp":1744828215047,"user_tz":300,"elapsed":275,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"b403778c-8794-45fe-d773-34202c0ed64b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='highway-mpg', ylabel='price'>"]},"metadata":{},"execution_count":67},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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GGMYBps3b06NWbJkCVarNWPM/v37qa+vT40RQgghxMQ2ZgqN1tfX097eTn19PbquU1NTA8CsWbPIy8vj4osvZv78+Vx33XXce++9NDU18Z3vfIe1a9dit9sBuPnmm3nggQf41re+xZe//GVeeuklnnjiCZ5//vnU11m3bh3XX389Z599NkuXLuW+++6ju7ubG264AQCv18uNN97IunXrKCoqwuPxcNttt7FixQqWL18+4t8XIYQQQuSgYTnDOAyuv/56E+j16+WXX06N+eCDD8xLL73UdDqdZklJifmNb3zDjMViGc/z8ssvm9XV1abNZjNnzJhh/vrXv+71tX7+85+bU6dONW02m7l06VLz9ddfz3g8FAqZX/va18zCwkLT5XKZV155pdnY2Dio+8n2mKcQQgghcke279+KaeZwnflxzO/34/V68fl8suFdCCGEGCOyff8eN2UahBBCCCFyhQQsIYQQQoghJgFLCCGEEGKIScASQgghhBhiErCEEEIIIYaYBCwhhBBCiCEmAUsIIYQQYohJwBJCCCGEGGISsIQQQgghhtiY6UU43iQL6Pv9/lG+EiGEEEJkK/m+faJGOBKwRklXVxcAVVVVo3wlQgghhBisrq4uvF5vv49LL8JRYhgGDQ0N5OfnoyhKv+P8fj9VVVUcPnx4QvQsnEj3K/c6fk2k+5V7Hb8m0v0O5l5N06Srq4vKykpUtf+dVjKDNUpUVWXKlClZj/d4POP+D3i6iXS/cq/j10S6X7nX8Wsi3W+29zrQzFWSbHIXQgghhBhiErCEEEIIIYaYBKwcZ7fb+e53v4vdbh/tSxkRE+l+5V7Hr4l0v3Kv49dEut/huFfZ5C6EEEIIMcRkBksIIYQQYohJwBJCCCGEGGISsIQQQgghhpgELCGEEEKIISYBK0e88sorXH755VRWVqIoChs3bsx4/Etf+hKKomT8uuSSS0bnYk/R+vXrOeecc8jPz6e0tJQ1a9awf//+jDHhcJi1a9dSXFxMXl4eV111Fc3NzaN0xScvm3u94IILer22N9988yhd8anZsGEDixYtShXrW7FiBS+88ELq8fHyusKJ73U8va7H+9GPfoSiKNx+++2pj42n1zZdX/c6nl7b733ve73uZe7cuanHx9PreqJ7HerXVQJWjuju7mbx4sU8+OCD/Y655JJLaGxsTP36n//5nxG8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\n"},"metadata":{}}],"source":["sns.regplot(x=\"highway-mpg\", y=\"price\", data=df)"]},{"cell_type":"markdown","metadata":{"id":"6348aecc-0bf3-4830-b7ae-764729830001"},"source":["<p>As highway-mpg goes up, the price goes down: this indicates an inverse/negative relationship between these two variables. Highway mpg could potentially be a predictor of price.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"8fb6b4f6-8d38-43fe-8292-d931c1b82d86"},"source":["We can examine the correlation between 'highway-mpg' and 'price' and see it's approximately -0.704.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"ac6340fc-b57e-44d9-beb4-5539ce43715d","executionInfo":{"status":"ok","timestamp":1744828216305,"user_tz":300,"elapsed":14,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"e05775a7-33bd-4651-aca2-8b786553e734"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             highway-mpg     price\n","highway-mpg     1.000000 -0.704692\n","price          -0.704692  1.000000"],"text/html":["\n","  <div id=\"df-bcaeb223-3eac-4f40-a4d4-70579af2743d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>highway-mpg</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>highway-mpg</th>\n","      <td>1.000000</td>\n","      <td>-0.704692</td>\n","    </tr>\n","    <tr>\n","      <th>price</th>\n","      <td>-0.704692</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bcaeb223-3eac-4f40-a4d4-70579af2743d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bcaeb223-3eac-4f40-a4d4-70579af2743d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bcaeb223-3eac-4f40-a4d4-70579af2743d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ba5b2162-2e55-45b3-8460-679f20a9bac3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba5b2162-2e55-45b3-8460-679f20a9bac3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ba5b2162-2e55-45b3-8460-679f20a9bac3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[['highway-mpg', 'price']]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"highway-mpg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2053994604594411,\n        \"min\": -0.7046922650589531,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.7046922650589531,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2053994604594411,\n        \"min\": -0.7046922650589531,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          -0.7046922650589531\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":68}],"source":["df[['highway-mpg', 'price']].corr()"]},{"cell_type":"markdown","metadata":{"id":"0b72f597-1815-419c-a489-45b0e42170d3"},"source":["<h3>Weak Linear Relationship</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"bd15c77d-6db4-494a-8b78-e34c13bb5534"},"source":["Let's see if \"peak-rpm\" is a predictor variable of \"price\".\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"b5db75e4-e832-4360-88ca-8de5da572c12","executionInfo":{"status":"ok","timestamp":1744828217864,"user_tz":300,"elapsed":385,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"b245c1d2-10c6-44a3-8ec9-ff96b2c32f06"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='peak-rpm', ylabel='price'>"]},"metadata":{},"execution_count":69},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["sns.regplot(x=\"peak-rpm\", y=\"price\", data=df)"]},{"cell_type":"markdown","metadata":{"id":"5790eb83-46c7-45ca-b668-556859c78bd1"},"source":["<p>Peak rpm does not seem like a good predictor of the price at all since the regression line is close to horizontal. Also, the data points are very scattered and far from the fitted line, showing lots of variability. Therefore, it's not a reliable variable.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"b624aefe-143b-4271-81dc-a6fbdabfd8df"},"source":["We can examine the correlation between 'peak-rpm' and 'price' and see it's approximately -0.101616.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"6ecfbb3f-fb46-47e2-bfbf-64f5bf1ec85f","executionInfo":{"status":"ok","timestamp":1744828219177,"user_tz":300,"elapsed":34,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"21ba9fc1-27f5-44a8-dca3-41fec29bbe5a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          peak-rpm     price\n","peak-rpm  1.000000 -0.101616\n","price    -0.101616  1.000000"],"text/html":["\n","  <div id=\"df-9f7da358-018b-421e-b1f0-bd14616490d6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>peak-rpm</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>peak-rpm</th>\n","      <td>1.000000</td>\n","      <td>-0.101616</td>\n","    </tr>\n","    <tr>\n","      <th>price</th>\n","      <td>-0.101616</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f7da358-018b-421e-b1f0-bd14616490d6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9f7da358-018b-421e-b1f0-bd14616490d6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9f7da358-018b-421e-b1f0-bd14616490d6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9a142a52-fe88-4281-afb8-532341dc6ab2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a142a52-fe88-4281-afb8-532341dc6ab2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9a142a52-fe88-4281-afb8-532341dc6ab2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[['peak-rpm','price']]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"peak-rpm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7789600548218019,\n        \"min\": -0.10161587407588185,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.10161587407588185,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7789600548218019,\n        \"min\": -0.10161587407588185,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          -0.10161587407588185\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":70}],"source":["df[['peak-rpm','price']].corr()"]},{"cell_type":"markdown","metadata":{"id":"d523a9da-57cc-4f05-89f0-3928cd7aee09"},"source":[" <div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n","<h1> Question  3 a): </h1>\n","\n","<p>Find the correlation  between x=\"stroke\" and y=\"price\".</p>\n","<p>Hint: if you would like to select those columns, use the following syntax: df[[\"stroke\",\"price\"]].  </p>\n","</div>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"0c43817a-9251-4156-9691-94383551e12d","executionInfo":{"status":"ok","timestamp":1744828220230,"user_tz":300,"elapsed":23,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"90630aac-c267-40dc-a0a3-26da1425ad54"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         stroke    price\n","stroke  1.00000  0.08231\n","price   0.08231  1.00000"],"text/html":["\n","  <div id=\"df-713460eb-330e-4fa5-8520-323ea90e8cf1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>stroke</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>stroke</th>\n","      <td>1.00000</td>\n","      <td>0.08231</td>\n","    </tr>\n","    <tr>\n","      <th>price</th>\n","      <td>0.08231</td>\n","      <td>1.00000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-713460eb-330e-4fa5-8520-323ea90e8cf1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-713460eb-330e-4fa5-8520-323ea90e8cf1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-713460eb-330e-4fa5-8520-323ea90e8cf1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ae924e9d-da0b-44e3-84a9-82f4580a70fd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae924e9d-da0b-44e3-84a9-82f4580a70fd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ae924e9d-da0b-44e3-84a9-82f4580a70fd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"stroke\\\",\\\"price\\\"]]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6489049440809929,\n        \"min\": 0.08230982738970502,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.08230982738970502,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6489049440809929,\n        \"min\": 0.08230982738970502,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.08230982738970502\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":71}],"source":["# Write your code below and press Shift+Enter to execute\n","\n","df[[\"stroke\",\"price\"]].corr()"]},{"cell_type":"markdown","metadata":{"id":"475de5c4-135a-43a9-baab-cb5e291c5965"},"source":["<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n","<h1>Question  3 b):</h1>\n","\n","<p>Given the correlation results between \"price\" and \"stroke\", do you expect a linear relationship?</p>\n","<p>Verify your results using the function \"regplot()\".</p>\n","</div>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"f7ba4994-a299-40a8-88b7-71f9b2d7c086","executionInfo":{"status":"ok","timestamp":1744828221709,"user_tz":300,"elapsed":255,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"b1fb2189-8b06-41d1-d8d3-5f84e47634fc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='stroke', ylabel='price'>"]},"metadata":{},"execution_count":72},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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YhrP95aOQVOcVVdXY//+/fjb3/6W6EOhfsT6WlVWVkZ8Wl64cCGmTp2K5557Dj/72c+G+zBT3jnnnIPa2lo4nU784Q9/wLJly7Bjx45eT8aUOAN5rfi+SpyjR4/izjvvxJYtW1h8P0AMmuLo9ttvxxtvvIGdO3f2+0mpuLgYzc3NEZc1NzejuLh4OA+ROg3kterObDbj/PPPx+HDh4fp6CicxWJBeXk5AGDOnDnYs2cPnnzySTz33HM9xvJ9lVgDea264/tq5OzduxctLS2YPXu2cZmqqti5cyeefvpp+Hw+KIoS8TN8b+lY0xQHQgjcfvvt2LhxI7Zt24ZJkyb1+zOVlZXYunVrxGVbtmzpc/6fhm4wr1V3qqqirq4OJSUlw3CE1B9N0+Dz+aJex/dVcunrteqO76uRc+mll6Kurg61tbXG19y5c3Hdddehtra2R8AE8L1lSHQl+liwfPlykZ2dLbZv3y6ampqML4/HY4y5/vrrxb333mt8/8477wiTySR+9atfiYMHD4oHH3xQmM1mUVdXl4iHkDIG81o99NBD4u233xb19fVi79694uqrrxY2m00cOHAgEQ8hpdx7771ix44d4siRI2Lfvn3i3nvvFZIkib/85S9CCL6vkslAXyu+r5JL99VzfG9Fx6ApDgBE/XrhhReMMYsWLRLLli2L+LlXX31VnH322cJisYjp06eLTZs2jeyBp6DBvFYrVqwQEyZMEBaLRRQVFYnLL79cvP/++yN/8CnopptuEhMnThQWi0WMGzdOXHrppcZJWAi+r5LJQF8rvq+SS/egie+t6CQhhEhMjouIiIho9GBNExEREVEMGDQRERERxYBBExEREVEMGDQRERERxYBBExEREVEMGDQRERERxYBBExEREVEMGDQRERERxYBBExHRIH322WeQJAm1tbWJPhQiGgEMmogopXz/+9/HFVdckejDIKJRiEETEVEUgUAg0YdAREmGQRMRjUl/+MMfUFFRgbS0NOTn52Px4sW466678OKLL+LPf/4zJEmCJEnYvn27Mc32yiuvYNGiRbDZbHjppZegaRoefvhhjB8/HlarFbNmzcLmzZt7vU9VVXHTTTfh3HPPRUNDAwDgz3/+M2bPng2bzYbJkyfjoYceQjAYHKmngYjiyJToAyAiirempiZcc801WLt2La688kq0tbXhr3/9K2644QY0NDTA5XLhhRdeAADk5eWhsbERAHDvvffisccew/nnnw+bzYYnn3wSjz32GJ577jmcf/75+P3vf49/+qd/woEDB3DWWWdF3KfP58M111yDzz77DH/9618xbtw44z6feuopfPnLX0Z9fT1uvfVWAMCDDz44sk8KEQ2ZJIQQiT4IIqJ4ev/99zFnzhx89tlnmDhxYsR13//+99Ha2oo//elPxmWfffYZJk2ahCeeeAJ33nmncfkZZ5yB6upq3HfffcZl8+bNwwUXXIBnnnnG+Lm//vWv+OlPfwqfz4c33ngD2dnZAIDFixfj0ksvxerVq42f/6//+i/cfffdRqBGRKMHM01ENOacd955uPTSS1FRUYGqqiosWbIE3/72t5Gbm9vnz82dO9f4t8vlQmNjIy688MKIMRdeeCH+8Y9/RFx2zTXXYPz48di2bRvS0tKMy//xj3/gnXfewb/9278Zl6mqCq/XC4/Hg/T09KE8TCIaYaxpIqIxR1EUbNmyBW+99RamTZuG3/zmNzjnnHNw5MiRPn8uIyNjUPd3+eWXY9++faipqYm43O1246GHHkJtba3xVVdXh08++QQ2m21Q90VEicNMExGNSZIk4cILL8SFF16IBx54ABMnTsTGjRthsVigqmq/P2+321FaWop33nkHixYtMi5/5513MG/evIixy5cvx4wZM/BP//RP2LRpkzF+9uzZOHToEMrLy+P74IgoIRg0EdGY8+6772Lr1q1YsmQJCgsL8e677+L48eOYOnUqvF4v3n77bRw6dAj5+flG/VE0d911Fx588EFMmTIFs2bNwgsvvIDa2lq89NJLPcbecccdUFUVX//61/HWW2/hS1/6Eh544AF8/etfx4QJE/Dtb38bsizjH//4B/bv34+f//znw/kUENEwYNBERGOO3W7Hzp078cQTT8DlcmHixIl47LHHcNlll2Hu3LnYvn075s6dC7fbjf/93//FmWeeGfV2/vmf/xlOpxM//vGP0dLSgmnTpuH//b//12PlXMiKFSugaRouv/xybN68GVVVVXjjjTfw8MMP4xe/+AXMZjPOPfdc3HLLLcP46IlouHD1HBEREVEMWAhOREREFAMGTUREREQxYNBEREREFAMGTUREREQxYNBEREREFAMGTUREREQxYNBEREREFAMGTUREREQxYNBEREREFAMGTUREREQxYNBEREREFIP/HwykXOTHnbZjAAAAAElFTkSuQmCC\n"},"metadata":{}}],"source":["# Write your code below and press Shift+Enter to execute\n","sns.regplot(x=\"stroke\", y=\"price\", data=df)"]},{"cell_type":"markdown","metadata":{"id":"4b53ba93-a343-43f7-b27d-2ec84010e109"},"source":["<h3>Categorical Variables</h3>\n","\n","<p>These are variables that describe a 'characteristic' of a data unit, and are selected from a small group of categories. The categorical variables can have the type \"object\" or \"int64\". A good way to visualize categorical variables is by using boxplots.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"d72a2d9a-8bac-4223-9354-652d5690b042"},"source":["Let's look at the relationship between \"body-style\" and \"price\".\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"e221d2eb-60ac-4db2-91b0-708e8e168991","executionInfo":{"status":"ok","timestamp":1744828223595,"user_tz":300,"elapsed":172,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"d6ead8b6-5964-4b85-95f4-2e46c02b470f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='body-style', ylabel='price'>"]},"metadata":{},"execution_count":73},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["sns.boxplot(x=\"body-style\", y=\"price\", data=df)"]},{"cell_type":"markdown","metadata":{"id":"90d58d9d-f379-4085-a58d-37ab1e8fd0b5"},"source":["<p>We see that the distributions of price between the different body-style categories have a significant overlap, so body-style would not be a good predictor of price. Let's examine engine \"engine-location\" and \"price\":</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"9e343165-2193-419e-8d8d-429b4a7b18c5","executionInfo":{"status":"ok","timestamp":1744828227668,"user_tz":300,"elapsed":129,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"767563fa-7426-4bee-ec8e-8cd2e79ddc16"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='engine-location', ylabel='price'>"]},"metadata":{},"execution_count":74},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["sns.boxplot(x=\"engine-location\", y=\"price\", data=df)"]},{"cell_type":"markdown","metadata":{"id":"b726f737-72f8-4544-ac11-d65cec0574d7"},"source":["<p>Here we see that the distribution of price between these two engine-location categories, front and rear, are distinct enough to take engine-location as a potential good predictor of price.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"9a46e693-8347-41d8-9fd4-7c8fd630c423"},"source":[" Let's examine \"drive-wheels\" and \"price\".\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"927f5fcf-619f-42ee-b768-297f800e301a","executionInfo":{"status":"ok","timestamp":1744828229449,"user_tz":300,"elapsed":233,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"37b729f7-962d-499c-aad5-9859ee52aa40"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='drive-wheels', ylabel='price'>"]},"metadata":{},"execution_count":75},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# drive-wheels\n","sns.boxplot(x=\"drive-wheels\", y=\"price\", data=df)"]},{"cell_type":"markdown","metadata":{"id":"ccfffa75-e5ce-44f7-a3ab-6c443dc8370c"},"source":["<p>Here we see that the distribution of price between the different drive-wheels categories differs. As such, drive-wheels could potentially be a predictor of price.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"697b4329-cfe7-41a2-9905-ff6e9d1b5644"},"source":["<h2 id=\"discriptive_statistics\">3. Descriptive Statistical Analysis</h2>\n"]},{"cell_type":"markdown","metadata":{"id":"c9f2e2ea-80f3-4dcd-9c65-8ad518261eca"},"source":["<p>Let's first take a look at the variables by utilizing a description method.</p>\n","\n","<p>The <b>describe</b> function automatically computes basic statistics for all continuous variables. Any NaN values are automatically skipped in these statistics.</p>\n","\n","This will show:\n","<ul>\n","    <li>the count of that variable</li>\n","    <li>the mean</li>\n","    <li>the standard deviation (std)</li>\n","    <li>the minimum value</li>\n","    <li>the IQR (Interquartile Range: 25%, 50% and 75%)</li>\n","    <li>the maximum value</li>\n","<ul>\n"]},{"cell_type":"markdown","metadata":{"id":"59ed03ed-f92b-4805-9dd6-555dea6c4beb"},"source":[" We can apply the method \"describe\" as follows:\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"30c3f393-e7c6-4111-a000-0909d0f120d2","executionInfo":{"status":"ok","timestamp":1744828231994,"user_tz":300,"elapsed":83,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"306a75b8-3ed9-42e1-f5fc-08cfcf4d247c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        symboling  normalized-losses  wheel-base      length       width  \\\n","count  201.000000          201.00000  201.000000  201.000000  201.000000   \n","mean     0.840796          122.00000   98.797015    0.837102    0.915126   \n","std      1.254802           31.99625    6.066366    0.059213    0.029187   \n","min     -2.000000           65.00000   86.600000    0.678039    0.837500   \n","25%      0.000000          101.00000   94.500000    0.801538    0.890278   \n","50%      1.000000          122.00000   97.000000    0.832292    0.909722   \n","75%      2.000000          137.00000  102.400000    0.881788    0.925000   \n","max      3.000000          256.00000  120.900000    1.000000    1.000000   \n","\n","           height  curb-weight  engine-size        bore      stroke  \\\n","count  201.000000   201.000000   201.000000  201.000000  197.000000   \n","mean    53.766667  2555.666667   126.875622    3.330692    3.256904   \n","std      2.447822   517.296727    41.546834    0.268072    0.319256   \n","min     47.800000  1488.000000    61.000000    2.540000    2.070000   \n","25%     52.000000  2169.000000    98.000000    3.150000    3.110000   \n","50%     54.100000  2414.000000   120.000000    3.310000    3.290000   \n","75%     55.500000  2926.000000   141.000000    3.580000    3.410000   \n","max     59.800000  4066.000000   326.000000    3.940000    4.170000   \n","\n","       compression-ratio  horsepower     peak-rpm    city-mpg  highway-mpg  \\\n","count         201.000000  201.000000   201.000000  201.000000   201.000000   \n","mean           10.164279  103.405534  5117.665368   25.179104    30.686567   \n","std             4.004965   37.365700   478.113805    6.423220     6.815150   \n","min             7.000000   48.000000  4150.000000   13.000000    16.000000   \n","25%             8.600000   70.000000  4800.000000   19.000000    25.000000   \n","50%             9.000000   95.000000  5125.369458   24.000000    30.000000   \n","75%             9.400000  116.000000  5500.000000   30.000000    34.000000   \n","max            23.000000  262.000000  6600.000000   49.000000    54.000000   \n","\n","              price  city-L/100km      diesel         gas  \n","count    201.000000    201.000000  201.000000  201.000000  \n","mean   13207.129353      9.944145    0.099502    0.900498  \n","std     7947.066342      2.534599    0.300083    0.300083  \n","min     5118.000000      4.795918    0.000000    0.000000  \n","25%     7775.000000      7.833333    0.000000    1.000000  \n","50%    10295.000000      9.791667    0.000000    1.000000  \n","75%    16500.000000     12.368421    0.000000    1.000000  \n","max    45400.000000     18.076923    1.000000    1.000000  "],"text/html":["\n","  <div id=\"df-7c1fc3ab-f0d3-46e6-8cac-af7ec384e119\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>symboling</th>\n","      <th>normalized-losses</th>\n","      <th>wheel-base</th>\n","      <th>length</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>curb-weight</th>\n","      <th>engine-size</th>\n","      <th>bore</th>\n","      <th>stroke</th>\n","      <th>compression-ratio</th>\n","      <th>horsepower</th>\n","      <th>peak-rpm</th>\n","      <th>city-mpg</th>\n","      <th>highway-mpg</th>\n","      <th>price</th>\n","      <th>city-L/100km</th>\n","      <th>diesel</th>\n","      <th>gas</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>201.000000</td>\n","      <td>201.00000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>197.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","      <td>201.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.840796</td>\n","      <td>122.00000</td>\n","      <td>98.797015</td>\n","      <td>0.837102</td>\n","      <td>0.915126</td>\n","      <td>53.766667</td>\n","      <td>2555.666667</td>\n","      <td>126.875622</td>\n","      <td>3.330692</td>\n","      <td>3.256904</td>\n","      <td>10.164279</td>\n","      <td>103.405534</td>\n","      <td>5117.665368</td>\n","      <td>25.179104</td>\n","      <td>30.686567</td>\n","      <td>13207.129353</td>\n","      <td>9.944145</td>\n","      <td>0.099502</td>\n","      <td>0.900498</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.254802</td>\n","      <td>31.99625</td>\n","      <td>6.066366</td>\n","      <td>0.059213</td>\n","      <td>0.029187</td>\n","      <td>2.447822</td>\n","      <td>517.296727</td>\n","      <td>41.546834</td>\n","      <td>0.268072</td>\n","      <td>0.319256</td>\n","      <td>4.004965</td>\n","      <td>37.365700</td>\n","      <td>478.113805</td>\n","      <td>6.423220</td>\n","      <td>6.815150</td>\n","      <td>7947.066342</td>\n","      <td>2.534599</td>\n","      <td>0.300083</td>\n","      <td>0.300083</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-2.000000</td>\n","      <td>65.00000</td>\n","      <td>86.600000</td>\n","      <td>0.678039</td>\n","      <td>0.837500</td>\n","      <td>47.800000</td>\n","      <td>1488.000000</td>\n","      <td>61.000000</td>\n","      <td>2.540000</td>\n","      <td>2.070000</td>\n","      <td>7.000000</td>\n","      <td>48.000000</td>\n","      <td>4150.000000</td>\n","      <td>13.000000</td>\n","      <td>16.000000</td>\n","      <td>5118.000000</td>\n","      <td>4.795918</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>101.00000</td>\n","      <td>94.500000</td>\n","      <td>0.801538</td>\n","      <td>0.890278</td>\n","      <td>52.000000</td>\n","      <td>2169.000000</td>\n","      <td>98.000000</td>\n","      <td>3.150000</td>\n","      <td>3.110000</td>\n","      <td>8.600000</td>\n","      <td>70.000000</td>\n","      <td>4800.000000</td>\n","      <td>19.000000</td>\n","      <td>25.000000</td>\n","      <td>7775.000000</td>\n","      <td>7.833333</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.000000</td>\n","      <td>122.00000</td>\n","      <td>97.000000</td>\n","      <td>0.832292</td>\n","      <td>0.909722</td>\n","      <td>54.100000</td>\n","      <td>2414.000000</td>\n","      <td>120.000000</td>\n","      <td>3.310000</td>\n","      <td>3.290000</td>\n","      <td>9.000000</td>\n","      <td>95.000000</td>\n","      <td>5125.369458</td>\n","      <td>24.000000</td>\n","      <td>30.000000</td>\n","      <td>10295.000000</td>\n","      <td>9.791667</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.000000</td>\n","      <td>137.00000</td>\n","      <td>102.400000</td>\n","      <td>0.881788</td>\n","      <td>0.925000</td>\n","      <td>55.500000</td>\n","      <td>2926.000000</td>\n","      <td>141.000000</td>\n","      <td>3.580000</td>\n","      <td>3.410000</td>\n","      <td>9.400000</td>\n","      <td>116.000000</td>\n","      <td>5500.000000</td>\n","      <td>30.000000</td>\n","      <td>34.000000</td>\n","      <td>16500.000000</td>\n","      <td>12.368421</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>3.000000</td>\n","      <td>256.00000</td>\n","      <td>120.900000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>59.800000</td>\n","      <td>4066.000000</td>\n","      <td>326.000000</td>\n","      <td>3.940000</td>\n","      <td>4.170000</td>\n","      <td>23.000000</td>\n","      <td>262.000000</td>\n","      <td>6600.000000</td>\n","      <td>49.000000</td>\n","      <td>54.000000</td>\n","      <td>45400.000000</td>\n","      <td>18.076923</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c1fc3ab-f0d3-46e6-8cac-af7ec384e119')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7c1fc3ab-f0d3-46e6-8cac-af7ec384e119 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7c1fc3ab-f0d3-46e6-8cac-af7ec384e119');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4b110592-c124-4d92-b824-cb166dc3ba22\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b110592-c124-4d92-b824-cb166dc3ba22')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4b110592-c124-4d92-b824-cb166dc3ba22 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"symboling\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.77147139083542,\n        \"min\": -2.0,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8407960199004975,\n          1.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"normalized-losses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.47700060174985,\n        \"min\": 31.996249780247684,\n        \"max\": 256.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          201.0,\n          122.0,\n          137.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wheel-base\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.023930266261296,\n        \"min\": 6.0663655548257305,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          98.79701492537313,\n          97.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.80772974061185,\n        \"min\": 0.05921275873275767,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8371023307298204,\n          0.8322921672272945,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.7867850438463,\n        \"min\": 0.029187094704637262,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9151257600884466,\n          0.9097222222222222,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57.607984964607475,\n        \"min\": 2.44782216129631,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53.766666666666666,\n          54.1,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"curb-weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1271.5185185100302,\n        \"min\": 201.0,\n        \"max\": 4066.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2555.6666666666665,\n          2414.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"engine-size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.9092048914732,\n        \"min\": 41.54683444904457,\n        \"max\": 326.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          126.87562189054727,\n          120.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.05726955912208,\n        \"min\": 0.26807185712285586,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.33069156704042,\n          3.31,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 68.66860980405795,\n        \"min\": 0.31925623999073816,\n        \"max\": 197.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.256903553299492,\n          3.29,\n          197.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"compression-ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67.6990822146513,\n        \"min\": 4.004965493233378,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.164278606965174,\n          9.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"horsepower\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77.51601512630882,\n        \"min\": 37.36569950210651,\n        \"max\": 262.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          103.40553390682057,\n          95.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"peak-rpm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2361.117129652999,\n        \"min\": 201.0,\n        \"max\": 6600.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5117.665367742568,\n          5125.369458128079,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city-mpg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.910441132454544,\n        \"min\": 6.4232204690505394,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25.17910447761194,\n          24.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"highway-mpg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.66824188389858,\n        \"min\": 6.815149936480959,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          30.686567164179106,\n          30.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13873.905956718689,\n        \"min\": 201.0,\n        \"max\": 45400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13207.129353233831,\n          10295.0,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city-L/100km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67.92731833149483,\n        \"min\": 2.5345992612400017,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.944145483678392,\n          9.791666666666666,\n          201.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diesel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.99436690882655,\n        \"min\": 0.0,\n        \"max\": 201.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.09950248756218906,\n          1.0,\n          0.3000829072836063\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.80260893583191,\n        \"min\": 0.0,\n        \"max\": 201.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.900497512437811,\n          1.0,\n          0.3000829072836063\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":76}],"source":["df.describe()"]},{"cell_type":"markdown","metadata":{"id":"bb6e0b20-6c8d-4b2a-bc29-48365a3f4589"},"source":[" The default setting of \"describe\" skips variables of type object. We can apply the method \"describe\" on the variables of type 'object' as follows:\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"397ea2bc-bec0-4856-a13b-b0ed4ab02400","executionInfo":{"status":"ok","timestamp":1744828233410,"user_tz":300,"elapsed":34,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"02579872-311d-4593-fc91-ec32b3a03aaa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          make aspiration num-of-doors body-style drive-wheels  \\\n","count      201        201          201        201          201   \n","unique      22          2            2          5            3   \n","top     toyota        std         four      sedan          fwd   \n","freq        32        165          115         94          118   \n","\n","       engine-location engine-type num-of-cylinders fuel-system  \\\n","count              201         201              201         201   \n","unique               2           6                7           8   \n","top              front         ohc             four        mpfi   \n","freq               198         145              157          92   \n","\n","       horsepower-binned  \n","count                200  \n","unique                 3  \n","top                  Low  \n","freq                 115  "],"text/html":["\n","  <div id=\"df-b3e09d43-2b32-4259-8f05-6efa45dfaf03\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>make</th>\n","      <th>aspiration</th>\n","      <th>num-of-doors</th>\n","      <th>body-style</th>\n","      <th>drive-wheels</th>\n","      <th>engine-location</th>\n","      <th>engine-type</th>\n","      <th>num-of-cylinders</th>\n","      <th>fuel-system</th>\n","      <th>horsepower-binned</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>201</td>\n","      <td>200</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>22</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>7</td>\n","      <td>8</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>toyota</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>fwd</td>\n","      <td>front</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>mpfi</td>\n","      <td>Low</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>32</td>\n","      <td>165</td>\n","      <td>115</td>\n","      <td>94</td>\n","      <td>118</td>\n","      <td>198</td>\n","      <td>145</td>\n","      <td>157</td>\n","      <td>92</td>\n","      <td>115</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3e09d43-2b32-4259-8f05-6efa45dfaf03')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b3e09d43-2b32-4259-8f05-6efa45dfaf03 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b3e09d43-2b32-4259-8f05-6efa45dfaf03');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-df8754b5-bad4-455d-be26-90b4ffc7c59e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df8754b5-bad4-455d-be26-90b4ffc7c59e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-df8754b5-bad4-455d-be26-90b4ffc7c59e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"make\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          22,\n          \"32\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"aspiration\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"165\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num-of-doors\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"115\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body-style\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          \"94\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drive-wheels\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"118\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"engine-location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"198\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"engine-type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          \"145\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num-of-cylinders\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          \"157\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fuel-system\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          8,\n          \"92\",\n          \"201\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"horsepower-binned\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"115\",\n          \"200\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":77}],"source":["df.describe(include=['object'])"]},{"cell_type":"markdown","metadata":{"id":"29923536-8021-48dd-8877-ee647c188e0a"},"source":["<h3>Value Counts</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"13da1df1-fe0e-4071-862e-459773340084"},"source":["<p>Value counts is a good way of understanding how many units of each characteristic/variable we have. We can apply the \"value_counts\" method on the column \"drive-wheels\". Donâ€™t forget the method \"value_counts\" only works on pandas series, not pandas dataframes. As a result, we only include one bracket <code>df['drive-wheels']</code>, not two brackets <code>df[['drive-wheels']]</code>.</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"c4452c0e-fa38-4351-b04b-da2ec746fcce","executionInfo":{"status":"ok","timestamp":1744828238199,"user_tz":300,"elapsed":25,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"fab4b0c4-a996-421e-d0b9-0f573901701c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["drive-wheels\n","fwd    118\n","rwd     75\n","4wd      8\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>drive-wheels</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>fwd</th>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>rwd</th>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>4wd</th>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":78}],"source":["df['drive-wheels'].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"cb83bec8-c467-4852-b526-c572cdf8f070"},"source":["We can convert the series to a dataframe as follows:\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"cda6d59e-9dcc-4d53-8983-af11a7c55fce","executionInfo":{"status":"ok","timestamp":1744828243536,"user_tz":300,"elapsed":18,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"86b2775a-0a9d-48bf-92f3-e1a6829b16cd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              count\n","drive-wheels       \n","fwd             118\n","rwd              75\n","4wd               8"],"text/html":["\n","  <div id=\"df-55de869d-e109-4e8d-b485-4661f8e504a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>drive-wheels</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>fwd</th>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>rwd</th>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>4wd</th>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55de869d-e109-4e8d-b485-4661f8e504a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-55de869d-e109-4e8d-b485-4661f8e504a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-55de869d-e109-4e8d-b485-4661f8e504a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5e23cf1f-d247-4deb-a25c-354827bb9aa3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e23cf1f-d247-4deb-a25c-354827bb9aa3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5e23cf1f-d247-4deb-a25c-354827bb9aa3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df['drive-wheels']\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"drive-wheels\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"fwd\",\n          \"rwd\",\n          \"4wd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 8,\n        \"max\": 118,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          118,\n          75,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":79}],"source":["df['drive-wheels'].value_counts().to_frame()"]},{"cell_type":"markdown","metadata":{"id":"e3e18e28-3884-4738-b94c-9963570b9cdb"},"source":["Let's repeat the above steps but save the results to the dataframe \"drive_wheels_counts\" and rename the column  'drive-wheels' to 'value_counts'.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"ef41ccf4-ebb2-43f2-8fe7-c3e286ae352f","executionInfo":{"status":"ok","timestamp":1744828245140,"user_tz":300,"elapsed":17,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"9f1ba0ab-bf5d-41ed-ecf4-80e9115a2622"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              count\n","drive-wheels       \n","fwd             118\n","rwd              75\n","4wd               8"],"text/html":["\n","  <div id=\"df-f9db8f00-6b79-45ad-b7ba-5ff4286c3ad6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>drive-wheels</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>fwd</th>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>rwd</th>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>4wd</th>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9db8f00-6b79-45ad-b7ba-5ff4286c3ad6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f9db8f00-6b79-45ad-b7ba-5ff4286c3ad6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f9db8f00-6b79-45ad-b7ba-5ff4286c3ad6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-933165ff-ec82-4797-8332-9f470b15649e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-933165ff-ec82-4797-8332-9f470b15649e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-933165ff-ec82-4797-8332-9f470b15649e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ed6432c6-873c-46ad-af9c-6c4c98068b98\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('drive_wheels_counts')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ed6432c6-873c-46ad-af9c-6c4c98068b98 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('drive_wheels_counts');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"drive_wheels_counts","summary":"{\n  \"name\": \"drive_wheels_counts\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"drive-wheels\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"fwd\",\n          \"rwd\",\n          \"4wd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 8,\n        \"max\": 118,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          118,\n          75,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":80}],"source":["drive_wheels_counts = df['drive-wheels'].value_counts().to_frame()\n","drive_wheels_counts.rename(columns={'drive-wheels': 'value_counts'}, inplace=True)\n","drive_wheels_counts"]},{"cell_type":"markdown","metadata":{"id":"e4871e51-1da5-4564-a941-88a05216689c"},"source":[" Now let's rename the index to 'drive-wheels':\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"47e9511a-0361-42cf-9ebd-067dce237f37","executionInfo":{"status":"ok","timestamp":1744828246725,"user_tz":300,"elapsed":28,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"ff48a45d-c571-406e-90de-ba7faa169b43"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              count\n","drive-wheels       \n","fwd             118\n","rwd              75\n","4wd               8"],"text/html":["\n","  <div id=\"df-56b7b4e3-db6b-493c-bbea-831dd2b37896\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>drive-wheels</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>fwd</th>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>rwd</th>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>4wd</th>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-56b7b4e3-db6b-493c-bbea-831dd2b37896')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-56b7b4e3-db6b-493c-bbea-831dd2b37896 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-56b7b4e3-db6b-493c-bbea-831dd2b37896');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dcda18b6-6301-4e40-93e0-4ebf797c3bed\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dcda18b6-6301-4e40-93e0-4ebf797c3bed')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dcda18b6-6301-4e40-93e0-4ebf797c3bed button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7447db99-4553-449e-bf22-b6a4eb0c50be\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('drive_wheels_counts')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7447db99-4553-449e-bf22-b6a4eb0c50be button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('drive_wheels_counts');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"drive_wheels_counts","summary":"{\n  \"name\": \"drive_wheels_counts\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"drive-wheels\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"fwd\",\n          \"rwd\",\n          \"4wd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 8,\n        \"max\": 118,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          118,\n          75,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":81}],"source":["drive_wheels_counts.index.name = 'drive-wheels'\n","drive_wheels_counts"]},{"cell_type":"markdown","metadata":{"id":"8d5b684c-9d04-4643-87f2-07ec3193b5ff"},"source":["We can repeat the above process for the variable 'engine-location'.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"28feb576-e707-4a89-ab52-16677e12aa7e","executionInfo":{"status":"ok","timestamp":1744828248642,"user_tz":300,"elapsed":25,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"70746bf6-5956-4fb3-8d3b-92293031e047"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 count\n","engine-location       \n","front              198\n","rear                 3"],"text/html":["\n","  <div id=\"df-001f1570-c001-415e-bbb2-f39025b4d084\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>engine-location</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>front</th>\n","      <td>198</td>\n","    </tr>\n","    <tr>\n","      <th>rear</th>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-001f1570-c001-415e-bbb2-f39025b4d084')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-001f1570-c001-415e-bbb2-f39025b4d084 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-001f1570-c001-415e-bbb2-f39025b4d084');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-42d24fa8-2614-4024-a59c-565d0b93c30c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-42d24fa8-2614-4024-a59c-565d0b93c30c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-42d24fa8-2614-4024-a59c-565d0b93c30c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"engine_loc_counts","summary":"{\n  \"name\": \"engine_loc_counts\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"engine-location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"rear\",\n          \"front\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 137,\n        \"min\": 3,\n        \"max\": 198,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":82}],"source":["# engine-location as variable\n","engine_loc_counts = df['engine-location'].value_counts().to_frame()\n","engine_loc_counts.rename(columns={'engine-location': 'value_counts'}, inplace=True)\n","engine_loc_counts.index.name = 'engine-location'\n","engine_loc_counts.head(10)"]},{"cell_type":"markdown","metadata":{"id":"3d324071-0002-476b-9f49-1eccb9ff670f"},"source":["<p>After examining the value counts of the engine location, we see that engine location would not be a good predictor variable for the price. This is because we only have three cars with a rear engine and 198 with an engine in the front, so this result is skewed. Thus, we are not able to draw any conclusions about the engine location.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"a462b7c6-7381-4604-b520-8afef89b0603"},"source":["<h2 id=\"basic_grouping\">4. Basics of Grouping</h2>\n"]},{"cell_type":"markdown","metadata":{"id":"ab350712-3da1-4789-9a2a-5eeca0339254"},"source":["<p>The \"groupby\" method groups data by different categories. The data is grouped based on one or several variables, and analysis is performed on the individual groups.</p>\n","\n","<p>For example, let's group by the variable \"drive-wheels\". We see that there are 3 different categories of drive wheels.</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"225b37f7-30f0-4bb2-a9f3-d3e6764fdd40","executionInfo":{"status":"ok","timestamp":1744828251429,"user_tz":300,"elapsed":28,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"060ffdd7-52e9-4df4-f49a-dc4b38a71c48"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['rwd', 'fwd', '4wd'], dtype=object)"]},"metadata":{},"execution_count":83}],"source":["df['drive-wheels'].unique()"]},{"cell_type":"markdown","metadata":{"id":"876393e7-6424-40dc-ad18-762383261e04"},"source":["<p>If we want to know, on average, which type of drive wheel is most valuable, we can group \"drive-wheels\" and then average them.</p>\n","\n","<p>We can select the columns 'drive-wheels', 'body-style' and 'price', then assign it to the variable \"df_group_one\".</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"16883e27-4b56-4de4-8106-038905af290f"},"outputs":[],"source":["df_group_one = df[['drive-wheels','body-style','price']]"]},{"cell_type":"markdown","metadata":{"id":"717e2129-64e6-4f24-8c3f-86940d21670b"},"source":["We can then calculate the average price for each of the different categories of data.\n"]},{"cell_type":"code","source":["# grouping results\n","df_group_one = df_group_one.groupby(['drive-wheels'],as_index=False)['price'].mean()\n","df_group_one"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"nsvstxL_zJZE","executionInfo":{"status":"ok","timestamp":1744828253816,"user_tz":300,"elapsed":36,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"f2fe046b-40f1-4ade-99f5-9b6df546531a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  drive-wheels         price\n","0          4wd  10241.000000\n","1          fwd   9244.779661\n","2          rwd  19757.613333"],"text/html":["\n","  <div id=\"df-33413892-644b-4e6a-a04f-08228b68da97\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>drive-wheels</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4wd</td>\n","      <td>10241.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>fwd</td>\n","      <td>9244.779661</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>rwd</td>\n","      <td>19757.613333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33413892-644b-4e6a-a04f-08228b68da97')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-33413892-644b-4e6a-a04f-08228b68da97 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-33413892-644b-4e6a-a04f-08228b68da97');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c0d91941-999d-4e63-9559-3882cbd83dd3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c0d91941-999d-4e63-9559-3882cbd83dd3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c0d91941-999d-4e63-9559-3882cbd83dd3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_3e7818e7-754b-4105-87e5-a32e62773d14\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_group_one')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3e7818e7-754b-4105-87e5-a32e62773d14 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_group_one');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_group_one","summary":"{\n  \"name\": \"df_group_one\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"drive-wheels\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4wd\",\n          \"fwd\",\n          \"rwd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5803.419338656744,\n        \"min\": 9244.77966101695,\n        \"max\": 19757.613333333335,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10241.0,\n          9244.77966101695,\n          19757.613333333335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":85}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"22a8f983-75e5-40c7-85a3-697f757d4995","executionInfo":{"status":"ok","timestamp":1744828254766,"user_tz":300,"elapsed":97,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"88d0effe-da9b-40fa-844c-32e29efe3b7b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  drive-wheels         price\n","0          4wd  10241.000000\n","1          fwd   9244.779661\n","2          rwd  19757.613333"],"text/html":["\n","  <div id=\"df-5b1bb818-65cf-459d-9cdc-9a50516acf91\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>drive-wheels</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4wd</td>\n","      <td>10241.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>fwd</td>\n","      <td>9244.779661</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>rwd</td>\n","      <td>19757.613333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b1bb818-65cf-459d-9cdc-9a50516acf91')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5b1bb818-65cf-459d-9cdc-9a50516acf91 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5b1bb818-65cf-459d-9cdc-9a50516acf91');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-31aaeab0-c2a2-48b8-9589-d9902ddb0fa7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31aaeab0-c2a2-48b8-9589-d9902ddb0fa7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-31aaeab0-c2a2-48b8-9589-d9902ddb0fa7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2e1b3098-7ec1-45e1-b127-4ddeda6573a5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_group_one')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2e1b3098-7ec1-45e1-b127-4ddeda6573a5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_group_one');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_group_one","summary":"{\n  \"name\": \"df_group_one\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"drive-wheels\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4wd\",\n          \"fwd\",\n          \"rwd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5803.419338656744,\n        \"min\": 9244.77966101695,\n        \"max\": 19757.613333333335,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10241.0,\n          9244.77966101695,\n          19757.613333333335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":86}],"source":["# grouping results\n","df_group_one = df_group_one.groupby(['drive-wheels'],as_index=False).mean()\n","df_group_one"]},{"cell_type":"markdown","metadata":{"id":"406420f4-261f-4899-b7c7-3a5725c748a9"},"source":["<p>From our data, it seems rear-wheel drive vehicles are, on average, the most expensive, while 4-wheel and front-wheel are approximately the same in price.</p>\n","\n","<p>You can also group by multiple variables. For example, let's group by both 'drive-wheels' and 'body-style'. This groups the dataframe by the unique combination of 'drive-wheels' and 'body-style'. We can store the results in the variable 'grouped_test1'.</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"092fc0eb-45ab-439a-8605-69b3ba75a0cf","executionInfo":{"status":"ok","timestamp":1744828255772,"user_tz":300,"elapsed":29,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"ce13c0d4-96de-4da5-9e28-2287a6f975b6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   drive-wheels   body-style         price\n","0           4wd    hatchback   7603.000000\n","1           4wd        sedan  12647.333333\n","2           4wd        wagon   9095.750000\n","3           fwd  convertible  11595.000000\n","4           fwd      hardtop   8249.000000\n","5           fwd    hatchback   8396.387755\n","6           fwd        sedan   9811.800000\n","7           fwd        wagon   9997.333333\n","8           rwd  convertible  23949.600000\n","9           rwd      hardtop  24202.714286\n","10          rwd    hatchback  14337.777778\n","11          rwd        sedan  21711.833333\n","12          rwd        wagon  16994.222222"],"text/html":["\n","  <div id=\"df-ab668382-5ef6-49ab-b37a-9aad308f148e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>drive-wheels</th>\n","      <th>body-style</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4wd</td>\n","      <td>hatchback</td>\n","      <td>7603.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4wd</td>\n","      <td>sedan</td>\n","      <td>12647.333333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4wd</td>\n","      <td>wagon</td>\n","      <td>9095.750000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>fwd</td>\n","      <td>convertible</td>\n","      <td>11595.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>fwd</td>\n","      <td>hardtop</td>\n","      <td>8249.000000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>fwd</td>\n","      <td>hatchback</td>\n","      <td>8396.387755</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>fwd</td>\n","      <td>sedan</td>\n","      <td>9811.800000</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>fwd</td>\n","      <td>wagon</td>\n","      <td>9997.333333</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>rwd</td>\n","      <td>convertible</td>\n","      <td>23949.600000</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>rwd</td>\n","      <td>hardtop</td>\n","      <td>24202.714286</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>rwd</td>\n","      <td>hatchback</td>\n","      <td>14337.777778</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>rwd</td>\n","      <td>sedan</td>\n","      <td>21711.833333</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>rwd</td>\n","      <td>wagon</td>\n","      <td>16994.222222</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab668382-5ef6-49ab-b37a-9aad308f148e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ab668382-5ef6-49ab-b37a-9aad308f148e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ab668382-5ef6-49ab-b37a-9aad308f148e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-958465fa-fb8f-4c28-a83f-c0cdf53cc382\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-958465fa-fb8f-4c28-a83f-c0cdf53cc382')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-958465fa-fb8f-4c28-a83f-c0cdf53cc382 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_45cb0f84-f6a0-4a11-b686-830fa08a294c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grouped_test1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_45cb0f84-f6a0-4a11-b686-830fa08a294c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('grouped_test1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"grouped_test1","summary":"{\n  \"name\": \"grouped_test1\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"drive-wheels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4wd\",\n          \"fwd\",\n          \"rwd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body-style\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"sedan\",\n          \"hardtop\",\n          \"wagon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6064.734417035753,\n        \"min\": 7603.0,\n        \"max\": 24202.714285714286,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          21711.833333333332,\n          24202.714285714286,\n          7603.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":87}],"source":["# grouping results\n","df_gptest = df[['drive-wheels','body-style','price']]\n","grouped_test1 = df_gptest.groupby(['drive-wheels','body-style'],as_index=False).mean()\n","grouped_test1"]},{"cell_type":"markdown","metadata":{"id":"774d5693-b1da-466f-8728-88d5b28fd533"},"source":["<p>This grouped data is much easier to visualize when it is made into a pivot table. A pivot table is like an Excel spreadsheet, with one variable along the column and another along the row. We can convert the dataframe to a pivot table using the method \"pivot\" to create a pivot table from the groups.</p>\n","\n","<p>In this case, we will leave the drive-wheels variable as the rows of the table, and pivot body-style to become the columns of the table:</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"07c87895-1b1d-4c84-a6d0-66cf3aed1561","executionInfo":{"status":"ok","timestamp":1744828256916,"user_tz":300,"elapsed":49,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"a8a3955f-13d7-42de-ace4-d3ff7db16341"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   price                                            \\\n","body-style   convertible       hardtop     hatchback         sedan   \n","drive-wheels                                                         \n","4wd                  NaN           NaN   7603.000000  12647.333333   \n","fwd              11595.0   8249.000000   8396.387755   9811.800000   \n","rwd              23949.6  24202.714286  14337.777778  21711.833333   \n","\n","                            \n","body-style           wagon  \n","drive-wheels                \n","4wd            9095.750000  \n","fwd            9997.333333  \n","rwd           16994.222222  "],"text/html":["\n","  <div id=\"df-f4b22b51-f8f1-479a-bd9a-a59701624fa0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th colspan=\"5\" halign=\"left\">price</th>\n","    </tr>\n","    <tr>\n","      <th>body-style</th>\n","      <th>convertible</th>\n","      <th>hardtop</th>\n","      <th>hatchback</th>\n","      <th>sedan</th>\n","      <th>wagon</th>\n","    </tr>\n","    <tr>\n","      <th>drive-wheels</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4wd</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7603.000000</td>\n","      <td>12647.333333</td>\n","      <td>9095.750000</td>\n","    </tr>\n","    <tr>\n","      <th>fwd</th>\n","      <td>11595.0</td>\n","      <td>8249.000000</td>\n","      <td>8396.387755</td>\n","      <td>9811.800000</td>\n","      <td>9997.333333</td>\n","    </tr>\n","    <tr>\n","      <th>rwd</th>\n","      <td>23949.6</td>\n","      <td>24202.714286</td>\n","      <td>14337.777778</td>\n","      <td>21711.833333</td>\n","      <td>16994.222222</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4b22b51-f8f1-479a-bd9a-a59701624fa0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f4b22b51-f8f1-479a-bd9a-a59701624fa0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f4b22b51-f8f1-479a-bd9a-a59701624fa0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c277e9e4-8999-45ac-8ba3-a9b22435d9c4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c277e9e4-8999-45ac-8ba3-a9b22435d9c4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c277e9e4-8999-45ac-8ba3-a9b22435d9c4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2d75d49f-e957-4916-be3f-783aa43451d6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grouped_pivot')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2d75d49f-e957-4916-be3f-783aa43451d6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('grouped_pivot');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"grouped_pivot","summary":"{\n  \"name\": \"grouped_pivot\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": [\n        \"drive-wheels\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4wd\",\n          \"fwd\",\n          \"rwd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"convertible\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8736.02143884732,\n        \"min\": 11595.0,\n        \"max\": 23949.6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          23949.6,\n          11595.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"hardtop\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11280.97955654127,\n        \"min\": 8249.0,\n        \"max\": 24202.714285714286,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          24202.714285714286,\n          8249.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"hatchback\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3680.733877175991,\n        \"min\": 7603.0,\n        \"max\": 14337.777777777777,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          7603.0,\n          8396.387755102041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"sedan\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6215.789073921466,\n        \"min\": 9811.8,\n        \"max\": 21711.833333333332,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          12647.333333333334,\n          9811.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"wagon\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4323.485670837387,\n        \"min\": 9095.75,\n        \"max\": 16994.222222222223,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9095.75,\n          9997.333333333334\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":88}],"source":["grouped_pivot = grouped_test1.pivot(index='drive-wheels',columns='body-style')\n","grouped_pivot"]},{"cell_type":"markdown","metadata":{"id":"f24ff9c5-5fe9-4324-ab5c-1cb98fcf5eed"},"source":["<p>Often, we won't have data for some of the pivot cells. We can fill these missing cells with the value 0, but any other value could potentially be used as well. It should be mentioned that missing data is quite a complex subject and is an entire course on its own.</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"45135c3b-5e7a-4b78-8178-b70acc1a515a","executionInfo":{"status":"ok","timestamp":1744828257949,"user_tz":300,"elapsed":25,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"32dd4bdf-9779-4b6c-b886-fe872200c256"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   price                                            \\\n","body-style   convertible       hardtop     hatchback         sedan   \n","drive-wheels                                                         \n","4wd                  0.0      0.000000   7603.000000  12647.333333   \n","fwd              11595.0   8249.000000   8396.387755   9811.800000   \n","rwd              23949.6  24202.714286  14337.777778  21711.833333   \n","\n","                            \n","body-style           wagon  \n","drive-wheels                \n","4wd            9095.750000  \n","fwd            9997.333333  \n","rwd           16994.222222  "],"text/html":["\n","  <div id=\"df-93213247-603c-455a-a492-fd022e6c91b6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th colspan=\"5\" halign=\"left\">price</th>\n","    </tr>\n","    <tr>\n","      <th>body-style</th>\n","      <th>convertible</th>\n","      <th>hardtop</th>\n","      <th>hatchback</th>\n","      <th>sedan</th>\n","      <th>wagon</th>\n","    </tr>\n","    <tr>\n","      <th>drive-wheels</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4wd</th>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>7603.000000</td>\n","      <td>12647.333333</td>\n","      <td>9095.750000</td>\n","    </tr>\n","    <tr>\n","      <th>fwd</th>\n","      <td>11595.0</td>\n","      <td>8249.000000</td>\n","      <td>8396.387755</td>\n","      <td>9811.800000</td>\n","      <td>9997.333333</td>\n","    </tr>\n","    <tr>\n","      <th>rwd</th>\n","      <td>23949.6</td>\n","      <td>24202.714286</td>\n","      <td>14337.777778</td>\n","      <td>21711.833333</td>\n","      <td>16994.222222</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93213247-603c-455a-a492-fd022e6c91b6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-93213247-603c-455a-a492-fd022e6c91b6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-93213247-603c-455a-a492-fd022e6c91b6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-20fcbf1c-9576-4d49-9d16-686e912e4a4d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-20fcbf1c-9576-4d49-9d16-686e912e4a4d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-20fcbf1c-9576-4d49-9d16-686e912e4a4d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4e70c0fd-cb50-4a8a-bd22-3a8a4f041a93\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grouped_pivot')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4e70c0fd-cb50-4a8a-bd22-3a8a4f041a93 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('grouped_pivot');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"grouped_pivot","summary":"{\n  \"name\": \"grouped_pivot\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": [\n        \"drive-wheels\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4wd\",\n          \"fwd\",\n          \"rwd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"convertible\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11976.807492817106,\n        \"min\": 0.0,\n        \"max\": 23949.6,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          11595.0,\n          23949.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"hardtop\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12304.053392453796,\n        \"min\": 0.0,\n        \"max\": 24202.714285714286,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          8249.0,\n          24202.714285714286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"hatchback\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3680.733877175991,\n        \"min\": 7603.0,\n        \"max\": 14337.777777777777,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          7603.0,\n          8396.387755102041,\n          14337.777777777777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"sedan\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6215.789073921466,\n        \"min\": 9811.8,\n        \"max\": 21711.833333333332,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          12647.333333333334,\n          9811.8,\n          21711.833333333332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"wagon\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4323.485670837387,\n        \"min\": 9095.75,\n        \"max\": 16994.222222222223,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9095.75,\n          9997.333333333334,\n          16994.222222222223\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":89}],"source":["grouped_pivot = grouped_pivot.fillna(0) #fill missing values with 0\n","grouped_pivot"]},{"cell_type":"markdown","metadata":{"id":"aeb7d264-e9a5-4a21-be07-82425c63ef02"},"source":["<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n","<h1>Question 4:</h1>\n","\n","<p>Use the \"groupby\" function to find the average \"price\" of each car based on \"body-style\".</p>\n","</div>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"89a72458-073a-4ee6-bcf8-9939a176f47c","executionInfo":{"status":"ok","timestamp":1744828259747,"user_tz":300,"elapsed":35,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"21c95924-f57a-4f82-c536-2a6507258572"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["body-style\n","convertible    21890.500000\n","hardtop        22208.500000\n","hatchback       9957.441176\n","sedan          14459.755319\n","wagon          12371.960000\n","Name: price, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","    </tr>\n","    <tr>\n","      <th>body-style</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>convertible</th>\n","      <td>21890.500000</td>\n","    </tr>\n","    <tr>\n","      <th>hardtop</th>\n","      <td>22208.500000</td>\n","    </tr>\n","    <tr>\n","      <th>hatchback</th>\n","      <td>9957.441176</td>\n","    </tr>\n","    <tr>\n","      <th>sedan</th>\n","      <td>14459.755319</td>\n","    </tr>\n","    <tr>\n","      <th>wagon</th>\n","      <td>12371.960000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":90}],"source":["# Write your code below and press Shift+Enter to execute\n","\n","# Group by body-style and calculate the mean price\n","body_style_avg_price = df.groupby('body-style')['price'].mean()\n","body_style_avg_price"]},{"cell_type":"markdown","metadata":{"id":"4f5859d0-8ad5-4fdc-a81e-d70df61aacd7"},"source":["If you did not import \"pyplot\", let's do it again.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e3825169-55d7-49f3-af18-717f716503c7"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"83986a89-0641-44c0-b636-872157e2a9bf"},"source":["<h4>Variables: Drive Wheels and Body Style vs. Price</h4>\n"]},{"cell_type":"markdown","metadata":{"id":"cf66c4fe-1a8c-46ec-941c-69c287231d1b"},"source":["Let's use a heat map to visualize the relationship between Body Style vs Price.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":435},"id":"360837d2-a1f5-4e96-850f-7f6325578cc2","executionInfo":{"status":"ok","timestamp":1744828265325,"user_tz":300,"elapsed":151,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"e4691039-a9f4-4696-b498-e81d77d4bf96"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#use the grouped results\n","plt.pcolor(grouped_pivot, cmap='RdBu')\n","plt.colorbar()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"f648c715-d378-4a72-a31c-02bad7470e2c"},"source":["<p>The heatmap plots the target variable (price) proportional to colour with respect to the variables 'drive-wheel' and 'body-style' on the vertical and horizontal axis, respectively. This allows us to visualize how the price is related to 'drive-wheel' and 'body-style'.</p>\n","\n","<p>The default labels convey no useful information to us. Let's change that:</p>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":494},"id":"e148bade-fd60-458c-be98-01e9e7f096fc","executionInfo":{"status":"ok","timestamp":1744828267936,"user_tz":300,"elapsed":105,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"8b8ed5a4-b89f-4f58-9a24-04ef3b1f80a0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, ax = plt.subplots()\n","im = ax.pcolor(grouped_pivot, cmap='RdBu')\n","\n","#label names\n","row_labels = grouped_pivot.columns.levels[1]\n","col_labels = grouped_pivot.index\n","\n","#move ticks and labels to the center\n","ax.set_xticks(np.arange(grouped_pivot.shape[1]) + 0.5, minor=False)\n","ax.set_yticks(np.arange(grouped_pivot.shape[0]) + 0.5, minor=False)\n","\n","#insert labels\n","ax.set_xticklabels(row_labels, minor=False)\n","ax.set_yticklabels(col_labels, minor=False)\n","\n","#rotate label if too long\n","plt.xticks(rotation=90)\n","\n","fig.colorbar(im)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"6ae30012-3598-4953-a4dd-07b0ffab1eed"},"source":["<p>Visualization is very important in data science, and Python visualization packages provide great freedom. We will go more in-depth in a separate visualizations courses, probably in your second year.</p>\n","\n","<p>The main question we want to answer in this module is, \"What are the main characteristics which have the most impact on the car price?\".</p>\n","\n","<p>To get a better measure of the important characteristics, we look at the correlation of these variables with the car price. In other words: how is the car price dependent on this variable?</p>\n"]},{"cell_type":"markdown","metadata":{"id":"eff19644-77da-4513-bb18-ffa7cff76005"},"source":["<h2 id=\"correlation_causation\">5. Correlation and Causation</h2>\n"]},{"cell_type":"markdown","metadata":{"id":"76543e10-09a0-495c-9d1f-b78f32eb81b0"},"source":["<p><b>Correlation</b>: a measure of the extent of interdependence between variables.</p>\n","\n","<p><b>Causation</b>: the relationship between cause and effect between two variables.</p>\n","\n","<p>It is important to know the difference between these two. Correlation does not imply causation. Determining correlation is much simpler  the determining causation as causation may require independent experimentation.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"328d8624-0688-46fb-ba30-b7a8f37ae3e0"},"source":["<p><b>Pearson Correlation</b></p>\n","<p>The Pearson Correlation measures the linear dependence between two variables X and Y.</p>\n","<p>The resulting coefficient is a value between -1 and 1 inclusive, where:</p>\n","<ul>\n","    <li><b>1</b>: Perfect positive linear correlation.</li>\n","    <li><b>0</b>: No linear correlation, the two variables most likely do not affect each other.</li>\n","    <li><b>-1</b>: Perfect negative linear correlation.</li>\n","</ul>\n"]},{"cell_type":"markdown","metadata":{"id":"f44a5ed8-1929-4dba-aba5-5b3606d62268"},"source":["<p>Pearson Correlation is the default method of the function \"corr\". Like before, we can calculate the Pearson Correlation of the of the 'int64' or 'float64'  variables.</p>\n"]},{"cell_type":"code","source":["# Calculate the Pearson correlation of numeric columns\n","numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns\n","correlation_matrix = df[numeric_cols].corr()\n","print(correlation_matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CZcSUQtk5gCA","executionInfo":{"status":"ok","timestamp":1744828802290,"user_tz":300,"elapsed":64,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"89191825-a434-446e-da12-148a3fa85ead"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                   symboling  normalized-losses  wheel-base    length  \\\n","symboling           1.000000           0.466264   -0.535987 -0.365404   \n","normalized-losses   0.466264           1.000000   -0.056661  0.019424   \n","wheel-base         -0.535987          -0.056661    1.000000  0.876024   \n","length             -0.365404           0.019424    0.876024  1.000000   \n","width              -0.242423           0.086802    0.814507  0.857170   \n","height             -0.550160          -0.373737    0.590742  0.492063   \n","curb-weight        -0.233118           0.099404    0.782097  0.880665   \n","engine-size        -0.110581           0.112360    0.572027  0.685025   \n","bore               -0.140019          -0.029862    0.493244  0.608971   \n","stroke             -0.008245           0.055563    0.158502  0.124139   \n","compression-ratio  -0.182196          -0.114713    0.250313  0.159733   \n","horsepower          0.075819           0.217299    0.371147  0.579821   \n","peak-rpm            0.279740           0.239543   -0.360305 -0.285970   \n","city-mpg           -0.035527          -0.225016   -0.470606 -0.665192   \n","highway-mpg         0.036233          -0.181877   -0.543304 -0.698142   \n","price              -0.082391           0.133999    0.584642  0.690628   \n","city-L/100km        0.066171           0.238567    0.476153  0.657373   \n","diesel             -0.196735          -0.101546    0.307237  0.211187   \n","gas                 0.196735           0.101546   -0.307237 -0.211187   \n","\n","                      width    height  curb-weight  engine-size      bore  \\\n","symboling         -0.242423 -0.550160    -0.233118    -0.110581 -0.140019   \n","normalized-losses  0.086802 -0.373737     0.099404     0.112360 -0.029862   \n","wheel-base         0.814507  0.590742     0.782097     0.572027  0.493244   \n","length             0.857170  0.492063     0.880665     0.685025  0.608971   \n","width              1.000000  0.306002     0.866201     0.729436  0.544885   \n","height             0.306002  1.000000     0.307581     0.074694  0.180449   \n","curb-weight        0.866201  0.307581     1.000000     0.849072  0.644060   \n","engine-size        0.729436  0.074694     0.849072     1.000000  0.572609   \n","bore               0.544885  0.180449     0.644060     0.572609  1.000000   \n","stroke             0.188829 -0.062704     0.167562     0.209523 -0.055390   \n","compression-ratio  0.189867  0.259737     0.156433     0.028889  0.001263   \n","horsepower         0.615077 -0.087027     0.757976     0.822676  0.566936   \n","peak-rpm          -0.245800 -0.309974    -0.279361    -0.256733 -0.267392   \n","city-mpg          -0.633531 -0.049800    -0.749543    -0.650546 -0.582027   \n","highway-mpg       -0.680635 -0.104812    -0.794889    -0.679571 -0.591309   \n","price              0.751265  0.135486     0.834415     0.872335  0.543155   \n","city-L/100km       0.673363  0.003811     0.785353     0.745059  0.554610   \n","diesel             0.244356  0.281578     0.221046     0.070779  0.054458   \n","gas               -0.244356 -0.281578    -0.221046    -0.070779 -0.054458   \n","\n","                     stroke  compression-ratio  horsepower  peak-rpm  \\\n","symboling         -0.008245          -0.182196    0.075819  0.279740   \n","normalized-losses  0.055563          -0.114713    0.217299  0.239543   \n","wheel-base         0.158502           0.250313    0.371147 -0.360305   \n","length             0.124139           0.159733    0.579821 -0.285970   \n","width              0.188829           0.189867    0.615077 -0.245800   \n","height            -0.062704           0.259737   -0.087027 -0.309974   \n","curb-weight        0.167562           0.156433    0.757976 -0.279361   \n","engine-size        0.209523           0.028889    0.822676 -0.256733   \n","bore              -0.055390           0.001263    0.566936 -0.267392   \n","stroke             1.000000           0.187923    0.098462 -0.065713   \n","compression-ratio  0.187923           1.000000   -0.214514 -0.435780   \n","horsepower         0.098462          -0.214514    1.000000  0.107885   \n","peak-rpm          -0.065713          -0.435780    0.107885  1.000000   \n","city-mpg          -0.034696           0.331425   -0.822214 -0.115413   \n","highway-mpg       -0.035201           0.268465   -0.804575 -0.058598   \n","price              0.082310           0.071107    0.809575 -0.101616   \n","city-L/100km       0.037300          -0.299372    0.889488  0.115830   \n","diesel             0.241303           0.985231   -0.169053 -0.475812   \n","gas               -0.241303          -0.985231    0.169053  0.475812   \n","\n","                   city-mpg  highway-mpg     price  city-L/100km    diesel  \\\n","symboling         -0.035527     0.036233 -0.082391      0.066171 -0.196735   \n","normalized-losses -0.225016    -0.181877  0.133999      0.238567 -0.101546   \n","wheel-base        -0.470606    -0.543304  0.584642      0.476153  0.307237   \n","length            -0.665192    -0.698142  0.690628      0.657373  0.211187   \n","width             -0.633531    -0.680635  0.751265      0.673363  0.244356   \n","height            -0.049800    -0.104812  0.135486      0.003811  0.281578   \n","curb-weight       -0.749543    -0.794889  0.834415      0.785353  0.221046   \n","engine-size       -0.650546    -0.679571  0.872335      0.745059  0.070779   \n","bore              -0.582027    -0.591309  0.543155      0.554610  0.054458   \n","stroke            -0.034696    -0.035201  0.082310      0.037300  0.241303   \n","compression-ratio  0.331425     0.268465  0.071107     -0.299372  0.985231   \n","horsepower        -0.822214    -0.804575  0.809575      0.889488 -0.169053   \n","peak-rpm          -0.115413    -0.058598 -0.101616      0.115830 -0.475812   \n","city-mpg           1.000000     0.972044 -0.686571     -0.949713  0.265676   \n","highway-mpg        0.972044     1.000000 -0.704692     -0.930028  0.198690   \n","price             -0.686571    -0.704692  1.000000      0.789898  0.110326   \n","city-L/100km      -0.949713    -0.930028  0.789898      1.000000 -0.241282   \n","diesel             0.265676     0.198690  0.110326     -0.241282  1.000000   \n","gas               -0.265676    -0.198690 -0.110326      0.241282 -1.000000   \n","\n","                        gas  \n","symboling          0.196735  \n","normalized-losses  0.101546  \n","wheel-base        -0.307237  \n","length            -0.211187  \n","width             -0.244356  \n","height            -0.281578  \n","curb-weight       -0.221046  \n","engine-size       -0.070779  \n","bore              -0.054458  \n","stroke            -0.241303  \n","compression-ratio -0.985231  \n","horsepower         0.169053  \n","peak-rpm           0.475812  \n","city-mpg          -0.265676  \n","highway-mpg       -0.198690  \n","price             -0.110326  \n","city-L/100km       0.241282  \n","diesel            -1.000000  \n","gas                1.000000  \n"]}]},{"cell_type":"markdown","metadata":{"id":"6b5aa485-a144-4f35-aa22-ce2af8814c26"},"source":["Sometimes we would like to know the significant of the correlation estimate.\n"]},{"cell_type":"markdown","metadata":{"id":"c33ae02c-648f-4e3e-97d7-8e41d3fd4935"},"source":["<b>P-value</b>\n","<p>What is this P-value? The P-value is the probability value that the correlation between these two variables is statistically significant. Normally, we choose a significance level of 0.05, which means that we are 95% confident that the correlation between the variables is significant.</p>\n","\n","By convention, when the\n","<ul>\n","    <li>p-value is $<$ 0.001: we say there is strong evidence that the correlation is significant.</li>\n","    <li>the p-value is $<$ 0.05: there is moderate evidence that the correlation is significant.</li>\n","    <li>the p-value is $<$ 0.1: there is weak evidence that the correlation is significant.</li>\n","    <li>the p-value is $>$ 0.1: there is no evidence that the correlation is significant.</li>\n","</ul>\n"]},{"cell_type":"markdown","metadata":{"id":"0c9c3c2d-97e1-484b-baf7-c18a3fd4e688"},"source":[" We can obtain this information using  \"stats\" module in the \"scipy\"  library.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"77b67c4d-9efc-414f-9e73-43c05ce1fcf2"},"outputs":[],"source":["from scipy import stats"]},{"cell_type":"markdown","metadata":{"id":"5a5ed3bb-2d5c-45d1-9b7c-061145db37c9"},"source":["<h3>Wheel-Base vs. Price</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"d666d3f8-686c-4bad-941c-a3614e31e882"},"source":["Let's calculate the  Pearson Correlation Coefficient and P-value of 'wheel-base' and 'price'.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2c113b90-8a63-46fc-9750-c855137a8051","executionInfo":{"status":"ok","timestamp":1744828888954,"user_tz":300,"elapsed":19,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"920b828b-4a23-4923-83b8-6a13c4ed6ce2"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is 0.5846418222655081  with a P-value of P = 8.076488270732947e-20\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['wheel-base'], df['price'])\n","print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)"]},{"cell_type":"markdown","metadata":{"id":"e873cf90-fa41-487a-b75c-b49df598d5d1"},"source":["<h4>Conclusion:</h4>\n","<p>Since the p-value is $<$ 0.001, the correlation between wheel-base and price is statistically significant, although the linear relationship isn't extremely strong (~0.585).</p>\n"]},{"cell_type":"markdown","metadata":{"id":"0b97a786-ad16-45c4-bcbb-ec1b61c02e0a"},"source":["<h3>Horsepower vs. Price</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"1f9eb814-6368-44b7-8eb9-5cd57b4fe50c"},"source":[" Let's calculate the  Pearson Correlation Coefficient and P-value of 'horsepower' and 'price'.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"95dd789d-9e24-4a45-b271-14fc88109288","executionInfo":{"status":"ok","timestamp":1744828891972,"user_tz":300,"elapsed":18,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"e93f1eda-8d9c-4ca6-db47-d08f7d306eda"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is 0.809574567003656  with a P-value of P =  6.369057428259571e-48\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['horsepower'], df['price'])\n","print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)"]},{"cell_type":"markdown","metadata":{"id":"4a17ca3b-a8e6-4a41-8cca-d950ea66616c"},"source":["<h4>Conclusion:</h4>\n","\n","<p>Since the p-value is $<$ 0.001, the correlation between horsepower and price is statistically significant, and the linear relationship is quite strong (~0.809, close to 1).</p>\n"]},{"cell_type":"markdown","metadata":{"id":"562f7b53-7cc6-475b-8a19-6dc8554b8ae4"},"source":["<h3>Length vs. Price</h3>\n","\n","Let's calculate the  Pearson Correlation Coefficient and P-value of 'length' and 'price'.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"22ba894a-e186-41a4-b359-0008aa15bfac","executionInfo":{"status":"ok","timestamp":1744828893681,"user_tz":300,"elapsed":17,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"2fc96b83-a9d9-4401-d6dc-ce145f0c4cc6"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is 0.690628380448364  with a P-value of P =  8.016477466158771e-30\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['length'], df['price'])\n","print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)"]},{"cell_type":"markdown","metadata":{"id":"aaa998f3-0b1a-4ad5-b272-51b5566bbeed"},"source":["<h4>Conclusion:</h4>\n","<p>Since the p-value is $<$ 0.001, the correlation between length and price is statistically significant, and the linear relationship is moderately strong (~0.691).</p>\n"]},{"cell_type":"markdown","metadata":{"id":"2c465ce0-a57c-43e3-a75d-caedada44c61"},"source":["<h3>Width vs. Price</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"e8bc2b42-158c-4d54-9290-83d02c92bdc5"},"source":[" Let's calculate the Pearson Correlation Coefficient and P-value of 'width' and 'price':\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8c6a02a3-baf1-4be4-91ef-663aec966ce1","executionInfo":{"status":"ok","timestamp":1744828895732,"user_tz":300,"elapsed":20,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"5b96206a-aa09-4fde-9e26-786fad9af455"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is 0.7512653440522674  with a P-value of P = 9.20033551048134e-38\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['width'], df['price'])\n","print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value )"]},{"cell_type":"markdown","metadata":{"id":"a79b4c87-463b-46c6-b41a-3ee85f14fc91"},"source":["#### Conclusion:\n","\n","Since the p-value is < 0.001, the correlation between width and price is statistically significant, and the linear relationship is quite strong (~0.751).\n"]},{"cell_type":"markdown","metadata":{"id":"c2be87da-77d5-4736-9da3-29c0807c0c00"},"source":["### Curb-Weight vs. Price\n"]},{"cell_type":"markdown","metadata":{"id":"22beff89-c126-404c-9643-3f89cb4b7221"},"source":[" Let's calculate the Pearson Correlation Coefficient and P-value of 'curb-weight' and 'price':\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f4c57d09-2991-4662-a35e-09e7e3f9fb07","executionInfo":{"status":"ok","timestamp":1744828898708,"user_tz":300,"elapsed":24,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"39f2268f-30ef-4a22-a118-0bbba0d98ec7"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is 0.8344145257702845  with a P-value of P =  2.1895772388939584e-53\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['curb-weight'], df['price'])\n","print( \"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)"]},{"cell_type":"markdown","metadata":{"id":"c1ab6444-1a8f-4836-98c3-80a9fcffe560"},"source":["<h4>Conclusion:</h4>\n","<p>Since the p-value is $<$ 0.001, the correlation between curb-weight and price is statistically significant, and the linear relationship is quite strong (~0.834).</p>\n"]},{"cell_type":"markdown","metadata":{"id":"2220cbb6-438b-4507-b16b-e3a38a0b9ade"},"source":["<h3>Engine-Size vs. Price</h3>\n","\n","Let's calculate the Pearson Correlation Coefficient and P-value of 'engine-size' and 'price':\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"833e01d9-096a-4528-ba03-290c884b5d17","executionInfo":{"status":"ok","timestamp":1744828901001,"user_tz":300,"elapsed":11,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"a4918bf7-cd94-42b8-e3dc-416abbf1edbd"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is 0.8723351674455185  with a P-value of P = 9.265491622198827e-64\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['engine-size'], df['price'])\n","print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)"]},{"cell_type":"markdown","metadata":{"id":"5e438cfe-d7db-42f6-b88c-0dd8acd1cb56"},"source":["<h4>Conclusion:</h4>\n","\n","<p>Since the p-value is $<$ 0.001, the correlation between engine-size and price is statistically significant, and the linear relationship is very strong (~0.872).</p>\n"]},{"cell_type":"markdown","metadata":{"id":"f809249d-41a1-45ef-b8eb-153954ad5b15"},"source":["<h3>Bore vs. Price</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"53277aeb-a2a1-4a24-a257-432cb9fccda1"},"source":[" Let's calculate the  Pearson Correlation Coefficient and P-value of 'bore' and 'price':\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6b656411-4e42-4b16-b31b-f26ef98ef8f7","executionInfo":{"status":"ok","timestamp":1744828903239,"user_tz":300,"elapsed":11,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"b8aa3a6d-ec49-442a-827d-2b0fa6c10611"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is 0.5431553832626603  with a P-value of P =   8.049189483935246e-17\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['bore'], df['price'])\n","print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =  \", p_value )"]},{"cell_type":"markdown","metadata":{"id":"c20ab6f6-d6b5-4e5e-93de-9c07615dbdc2"},"source":["<h4>Conclusion:</h4>\n","<p>Since the p-value is $<$ 0.001, the correlation between bore and price is statistically significant, but the linear relationship is only moderate (~0.521).</p>\n"]},{"cell_type":"markdown","metadata":{"id":"78d3d530-7af2-45ff-9dd4-78e59f25564e"},"source":[" We can relate the process for each 'city-mpg'  and 'highway-mpg':\n"]},{"cell_type":"markdown","metadata":{"id":"6a7b99e5-57a4-4597-830a-01f8d9ae1fa9"},"source":["<h3>City-mpg vs. Price</h3>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b230167e-469b-4f81-8cdc-672f4e9ac56c","executionInfo":{"status":"ok","timestamp":1744828905009,"user_tz":300,"elapsed":15,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"d73c6c22-5f52-4cdd-8cb4-d006e3e8df80"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is -0.6865710067844679  with a P-value of P =  2.3211320655674997e-29\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['city-mpg'], df['price'])\n","print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)"]},{"cell_type":"markdown","metadata":{"id":"a9357cd8-43f8-463b-a469-9c3dfd0ea1af"},"source":["<h4>Conclusion:</h4>\n","<p>Since the p-value is $<$ 0.001, the correlation between city-mpg and price is statistically significant, and the coefficient of about -0.687 shows that the relationship is negative and moderately strong.</p>\n"]},{"cell_type":"markdown","metadata":{"id":"4540ded1-25db-43b3-b38b-f6f3b3cef8ce"},"source":["<h3>Highway-mpg vs. Price</h3>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b1364af0-a0c3-40ec-8a66-c704a24858a8","executionInfo":{"status":"ok","timestamp":1744828906489,"user_tz":300,"elapsed":10,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"outputId":"7b02b716-272d-43bf-b481-bff4ac9cb3f8"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Pearson Correlation Coefficient is -0.7046922650589529  with a P-value of P =  1.749547114447669e-31\n"]}],"source":["pearson_coef, p_value = stats.pearsonr(df['highway-mpg'], df['price'])\n","print( \"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value )"]},{"cell_type":"markdown","metadata":{"id":"a802961a-dad3-4e2f-b0f4-d97cb9dca0f3"},"source":["#### Conclusion:\n","Since the p-value is < 0.001, the correlation between highway-mpg and price is statistically significant, and the coefficient of about -0.705 shows that the relationship is negative and moderately strong.\n"]},{"cell_type":"markdown","metadata":{"id":"2f9a77a0-d6ae-418c-940a-7fdfe97aeca8"},"source":["<h3>Conclusion: Important Variables</h3>\n"]},{"cell_type":"markdown","metadata":{"id":"6c93ce3e-6233-4d8e-bcfb-682b57f136db"},"source":["<p>We now have a better idea of what our data looks like and which variables are important to take into account when predicting the car price. We have narrowed it down to the following variables:</p>\n","\n","Continuous numerical variables:\n","<ul>\n","    <li>Length</li>\n","    <li>Width</li>\n","    <li>Curb-weight</li>\n","    <li>Engine-size</li>\n","    <li>Horsepower</li>\n","    <li>City-mpg</li>\n","    <li>Highway-mpg</li>\n","    <li>Wheel-base</li>\n","    <li>Bore</li>\n","</ul>\n","    \n","Categorical variables:\n","<ul>\n","    <li>Drive-wheels</li>\n","</ul>\n","\n","<p>As we now move into building machine learning models to automate our analysis, feeding the model with variables that meaningfully affect our target variable will improve our model's prediction performance.</p>\n"]},{"cell_type":"code","source":["\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"id":"UwX-fLN_6EFX","executionInfo":{"status":"ok","timestamp":1744835851324,"user_tz":300,"elapsed":17482,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"497618e6-8fc7-4468-a92c-b5c344b9b6a8"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["from nbconvert import HTMLExporter\n","import nbformat\n","\n","# Load the notebook\n","notebook_path = \"/content/drive/MyDrive/Spring2025/Mid-termexam/Codes/Exam1Part2-Starter.ipynb\"\n","output_html_path = \"/content/drive/MyDrive/Spring2025/Mid-termexam/mid-termhtml/exampart2.html\"\n","\n","with open(notebook_path) as f:\n","  notebook_content = nbformat.read(f, as_version=4)\n","\n","# Convert to HTMl\n","html_exporter = HTMLExporter()\n","(body, resources) = html_exporter.from_notebook_node(notebook_content)\n","\n","# save to HTML file\n","with open(output_html_path, 'w') as f:\n","  f.write(body)"],"metadata":{"id":"9bcUuDJUUbni","executionInfo":{"status":"ok","timestamp":1744835917035,"user_tz":300,"elapsed":4719,"user":{"displayName":"Md Arshad Khan","userId":"12622100619903279628"}}},"execution_count":108,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"kWHqnnfbUyGv"},"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.9"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}